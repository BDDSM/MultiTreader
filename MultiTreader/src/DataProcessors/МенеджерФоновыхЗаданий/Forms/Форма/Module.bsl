
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Элементы.ИдентификаторМенеджера.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокИдентификаторовМенеджеров());
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ЗначениеЗаполнено(Объект.ИдентификаторМенеджера) Тогда  
		Объект.ИдентификаторМенеджера = МенеджерПотоковСлужебный.ПолучитьАктивныйМенеджерПотоков();
	КонецЕсли;
	
	Объект.ИнтервалАвтообновления = 10;
	
	УстановитьВидимостьЭлементов();
	
	ПодключитьОтключитьОбработчикОжидания();

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ОтключитьОбработчикОжидания("СформироватьОтчет");
КонецПроцедуры

&НаКлиенте
Процедура ТабДокМониторОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Если ТипЗнч(Расшифровка) = Тип("ХранилищеЗначения") 
		ИЛИ ТипЗнч(Расшифровка) = Тип("Число") Тогда
		СтандартнаяОбработка = Ложь;
		ТабДокумент = ПолучитьДанныеХранилищаЗначений(Расшифровка, Элемент.ТекущаяОбласть.Имя);
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.Показать("Расшифровка ячейки");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазрезМенеджеровНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Элементы.ИдентификаторМенеджера.СписокВыбора = ПолучитьСписокИдентификаторовМенеджеров();	
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчет() 

	СформироватьОтчетНаСервере();
	
КонецПроцедуры // ОбновитьОтчет()

&НаКлиенте
Процедура ИдентификаторМенеджераПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ИдентификаторМенеджера) Тогда
		СтруктураРеквизитов = ПолучитьРеквизитыИдентификатораМенеджера(Объект.ИдентификаторМенеджера);
		Объект.КоличествоПотоков                  = СтруктураРеквизитов.КоличествоПотоков;
		Объект.КоличествоЭлементовКолекцииНаПоток = СтруктураРеквизитов.КоличествоЭлементовКолекцииНаПоток;
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ АВТООБНОВЛЕНИЯ

&НаКлиенте
Процедура УстановитьВидимостьЭлементов()
	
	Элементы.ИнтервалАвтообновления.Видимость = Объект.ИспользоватьАвтообновление;
	Элементы.НадписьСек.Видимость             = Объект.ИспользоватьАвтообновление;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОтключитьОбработчикОжидания()
	
	Если Объект.ИспользоватьАвтообновление Тогда
		ПодключитьОбработчикОжидания("СформироватьОтчет", Объект.ИнтервалАвтообновления);
	Иначе
		ОтключитьОбработчикОжидания("СформироватьОтчет");
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура СвернутьГруппировкиПриИзменении(Элемент)
	
	Если Объект.СвернутьГруппировки Тогда
		Элементы.ТабДокМонитор.ПоказатьУровеньГруппировокСтрок(0);
	Иначе
		Элементы.ТабДокМонитор.ПоказатьУровеньГруппировокСтрок(1);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьАвтообновлениеПриИзменении(Элемент)
	
	УстановитьВидимостьЭлементов();
	ПодключитьОтключитьОбработчикОжидания();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтчет(Команда)
	
	СформироватьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалАвтообновленияПриИзменении(Элемент)
	
	ПодключитьОтключитьОбработчикОжидания();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДинамическиеПараметры(Команда)
	
	ОбновитьДинамическиеПараметрыПользователя();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьМенеджер(Команда)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(Объект.ИдентификаторМенеджера) Тогда
		ОбновитьДинамическиеПараметрыПользователя();
		МенеджерПотоков.ИнициализироватьИЗапуститьМенеджерПотоков(Объект.ИдентификаторМенеджера);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьРасчет(Команда)
    Объект.ПродолжитьВыполнение = Истина;
    ЗапуститьМенеджер(Команда);
    Объект.ПродолжитьВыполнение = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ОстановитьМенеджер(Команда)
    МенеджерПотоков.ОстановитьМенеджерПотоков(Объект.ИдентификаторМенеджера);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПорцию(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.ИдентификаторМенеджера) Тогда
		Возврат;
	КонецЕсли;
	ОбновитьДинамическиеПараметрыПользователя();

    ОбработатьПорциюНаСервере(Объект.ИдентификаторМенеджера);
КонецПроцедуры

Процедура ОбработатьПорциюНаСервере(ИдентификаторМенеджера)

	СтруктураПараметров = МенеджерПотоковСлужебный.ИнициализацияПараметровМенеджераПотока(ИдентификаторМенеджера);
	МенеджерПотоковСлужебный.РабочийПотокПолучитьДанныеИзСтекаПоНомеруПорции(ИдентификаторМенеджера, СтруктураПараметров, НомерПорции);
	ПараметрыПотока    = СтруктураПараметров.ПараметрыПотока;
	ДопПараметрыПорции = СтруктураПараметров.ДопПараметрыПорции;
	
	СтруктураДопПараметров 	 = ДопПараметрыПорции.Получить();
	СтруктураПараметрыПотока = ПараметрыПотока.Получить();
	
    //* TODO: 27 ноября 2018 г. - 21:10 (Андреев М.А.)
    //Переписать на вызов метода который подготовит данные для передачи в обработчик потока
	
    СтруктураПараметров.Вставить("ОшибкаОбработкиДанных", Ложь);
	//Проведем отладку
	МенеджерПотоков.ОбработатьСобытиеЯдраМенеджераПотоков("РабочийПотокВыполнитьОбработкуДанных", СтруктураПараметров)
КонецПроцедуры
 



&НаКлиенте
Процедура Настройки(Команда)
    // Вставить содержимое обработчика.
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАСШИФРОВКИ ЯЧЕЙКИ

&НаСервере
Функция ПолучитьДанныеХранилищаЗначений(РасшифровкаЯчейки, ИмяОбласти)
		
	ТабДокумент = Новый ТабличныйДокумент;
	
	Если ТипЗнч(РасшифровкаЯчейки) = Тип("Число") Тогда
		
		ИмяПоля = "";
		Если Найти(ИмяОбласти, "C10") > 0 
			ИЛИ Найти(ИмяОбласти, "ПараметрыПотокаСтека") > 0 Тогда
			ИмяПоля = "ПараметрыПотока";
		ИначеЕсли Найти(ИмяОбласти, "C11") > 0 
			ИЛИ Найти(ИмяОбласти, "ДинамическиеПараметрыСтека") > 0 Тогда
			ИмяПоля = "ДопПараметрыПорции";
		КонецЕсли;
		
		ДанныеЯчейки = ПолучитьДанныеХранилищаЗначенийИзРегистраПоПараметрам("ккСтекДанных_Мьютекс", ИмяПоля, Объект.ИдентификаторМенеджера, РасшифровкаЯчейки);
		
	Иначе
		
		ДанныеЯчейки = РасшифровкаЯчейки.Получить();
		
	КонецЕсли;
	
	Если ДанныеЯчейки = Неопределено Тогда
		Возврат ТабДокумент;
	КонецЕсли;
	
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ТолькоПросмотр = Истина;
	ТабДокумент.ОтображатьСетку = Ложь;
	ТабДокумент.ОтображатьЗаголовки = Ложь;
	ТабДокумент.ОтображатьГруппировки = Истина;
	ОбъектОбработки = РеквизитФормыВЗначение("Объект");
	Макет = ОбъектОбработки.ПолучитьМакет("МакетХранилищаЗначений");
	
	ОбластьШапка = Макет.ПолучитьОбласть("ШапкаСтруктуры");
	ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаСтруктуры");

	Если ТипЗнч(ДанныеЯчейки) = Тип("Структура") Тогда
		
		ТабДокумент.Вывести(ОбластьШапка);
		ВывестиСтруктуруВМакет(ДанныеЯчейки, ТабДокумент, ОбластьСтрока);
		
	ИначеЕсли ТипЗнч(ДанныеЯчейки) = Тип("Массив") Тогда
		
		ВывестиМассивВМакет(ДанныеЯчейки, ТабДокумент, ОбластьСтрока);
		
	ИначеЕсли ТипЗнч(ДанныеЯчейки) = Тип("ТаблицаЗначений") Тогда
		
		Построитель = Новый ПостроительОтчета;
		Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ДанныеЯчейки);
		Построитель.Вывести(ТабДокумент);
		
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеХранилищаЗначенийИзРегистраПоПараметрам(ИмяРегистра, ПолеРегистра, ИдентификаторМенеджера, НомерПорции)
	
	ДанныеХранилища = Неопределено;
	
	Если ИмяРегистра = ""
		ИЛИ ПолеРегистра = "" Тогда
		Возврат ДанныеХранилища;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрДанных."+ПолеРегистра+" КАК " + ПолеРегистра + "
	|ИЗ
	|	РегистрСведений."+ИмяРегистра+" КАК РегистрДанных
	|ГДЕ
	|	РегистрДанных.ИдентификаторМенеджера = &ИдентификаторМенеджера
	|	И РегистрДанных.НомерПорции = &НомерПорции";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ИдентификаторМенеджера", ИдентификаторМенеджера);
	Запрос.УстановитьПараметр("НомерПорции"           , НомерПорции);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат ДанныеХранилища;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		ДанныеХранилища = Выборка[ПолеРегистра].Получить();
	КонецЕсли;
	
	Возврат ДанныеХранилища;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ВывестиСтруктуруВМакет(ДанныеЯчейки, ТабДокумент, ОбластьСтрока)
	
	Для каждого КлючЗначение Из ДанныеЯчейки Цикл
		
		ОбластьСтрока.Параметры.КлючСтруктуры = КлючЗначение.Ключ;
		ОбластьСтрока.Параметры.ЗначениеСтруктуры = КлючЗначение.Значение;
		
		ТабДокумент.Вывести(ОбластьСтрока);
		
		ТабДокумент.НачатьГруппуСтрок("Структура", Истина);
		Если ТипЗнч(КлючЗначение.Значение) = Тип("Структура") Тогда
			ВывестиСтруктуруВМакет(КлючЗначение.Значение, ТабДокумент, ОбластьСтрока);
		ИначеЕсли ТипЗнч(КлючЗначение.Значение) = Тип("Массив") Тогда
			ВывестиМассивВМакет(КлючЗначение.Значение, ТабДокумент, ОбластьСтрока);
		КонецЕсли;
		ТабДокумент.ЗакончитьГруппуСтрок();
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВывестиМассивВМакет(ДанныеЯчейки, ТабДокумент, ОбластьСтрока)
	
	НомСтр = 0;
	Для каждого ТекЭлемент Из ДанныеЯчейки Цикл
		
		НомСтр = НомСтр + 1;
		
		ОбластьСтрока.Параметры.КлючСтруктуры = НомСтр;
		Если ТипЗнч(ТекЭлемент) = Тип("Структура") Тогда
			
			ОбластьСтрока.Параметры.ЗначениеСтруктуры = "Структура";
			ТабДокумент.Вывести(ОбластьСтрока);
			
			ТабДокумент.НачатьГруппуСтрок("Структура", Истина);
			ВывестиСтруктуруВМакет(ТекЭлемент, ТабДокумент, ОбластьСтрока);
			ТабДокумент.ЗакончитьГруппуСтрок();
			
		Иначе
			
			ОбластьСтрока.Параметры.ЗначениеСтруктуры = ТекЭлемент;
			ТабДокумент.Вывести(ОбластьСтрока);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура СформироватьОтчетНаСервере()
	
	ТабДокМонитор.Очистить();
	СтруктураНастроек = Новый Структура; 
	СтруктураНастроек.Вставить("ИдентификаторМенеджера", Объект.ИдентификаторМенеджера);
	СтруктураНастроек.Вставить("СвернутьГруппировки"   , Объект.СвернутьГруппировки);
	СтруктураНастроек.Вставить("ВыводитьДвоичныеДанные", Объект.ВыводитьДвоичныеДанные);
	СтруктураНастроек.Вставить("ПоказатьОшибки"        , Объект.ПоказатьОшибки);
	
	СформироватьДанныеМонитора(ТабДокМонитор, СтруктураНастроек); 
	
КонецПроцедуры

Процедура ЗаполнитьКлючПотокаНаСервере(СтруктураПараметров)
	
	Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ккЖурналОтладкиПотоков.КлючПотока
		|ИЗ
		|	РегистрСведений.ЖурналОтладкиПотоков КАК ккЖурналОтладкиПотоков
		|ГДЕ
		|	ккЖурналОтладкиПотоков.ИдентификаторМенеджера = &ИдентификаторМенеджера
		|	И ккЖурналОтладкиПотоков.НомерПорции = &НомерПорции";
		
		Запрос.УстановитьПараметр("ИдентификаторМенеджера", Объект.ИдентификаторМенеджера);
		Запрос.УстановитьПараметр("НомерПорции"           , СтруктураПараметров.НомерПорции);
		
		ВыборкаЖурналОтладкиПотоков = Запрос.Выполнить().Выбрать();
		
		КлючПотока = Новый УникальныйИдентификатор;
		Если ВыборкаЖурналОтладкиПотоков.Следующий() Тогда
			КлючПотока = ВыборкаЖурналОтладкиПотоков.КлючПотока;
		КонецЕсли;
		СтруктураПараметров.Вставить("КлючПотока", КлючПотока);  
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокИдентификаторовМенеджеров()
	
	МассивИдентификаторов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ккДанныеМенеджераПотоков.ИдентификаторМенеджера
	|ИЗ
	|	РегистрСведений.ДанныеМенеджераПотоков КАК ккДанныеМенеджераПотоков";
	
	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		Возврат МассивИдентификаторов;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивИдентификаторов.Добавить(Выборка.ИдентификаторМенеджера);	
	КонецЦикла;
	
	Возврат МассивИдентификаторов;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДинамическиеПараметрыПользователя()
	
	Если ЗначениеЗаполнено(Объект.ИдентификаторМенеджера) Тогда
		
		ОбработчикСобытийЯдра = "МенеджерПотоковПереопределяемый.ОбработатьСобытиеМенеджераПотоков";
		
		РеквизитыИдентификатора = РеквизитыИдентификатораМенеджераПотоков(Объект.ИдентификаторМенеджера);
		
		ИспользоватьВнешнююОбработку = ЗначениеЗаполнено(РеквизитыИдентификатора.ИмяФайлаОбработки);
		ЗапускатьИзУказанногоФайла = РеквизитыИдентификатора.ЗапускатьИзУказанногоФайла;
		ИмяФайлаОбработки = РеквизитыИдентификатора.ИмяФайлаОбработки;
		Если ИспользоватьВнешнююОбработку Тогда
			ОбработчикСобытийЯдра = РеквизитыИдентификатора.Хранилище;
		КонецЕсли;
		
		ПараметрыОбработкиДанных = Новый Структура("ПродолжитьВыполнение", Объект.ПродолжитьВыполнение) ;
		
		МенеджерПотоковСлужебный.СохранитьДинамическиеПараметрыПользователя(Объект.ИдентификаторМенеджера,
				Объект.КоличествоПотоков, 
				Объект.КоличествоЭлементовКолекцииНаПоток, 
				Объект.РежимОтладки,
				ОбработчикСобытийЯдра,
				ИспользоватьВнешнююОбработку,
				ПараметрыОбработкиДанных,
				ЗапускатьИзУказанногоФайла,
				ИмяФайлаОбработки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РеквизитыИдентификатораМенеджераПотоков(Ссылка)
		
	СтруктураРеквизитов = Новый Структура("ИмяФайлаОбработки, Хранилище, ЗапускатьИзУказанногоФайла");	
		
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИдентификаторыМенеджераПотоков.ИмяФайлаОбработки,
		|	ИдентификаторыМенеджераПотоков.Хранилище,
		|	ИдентификаторыМенеджераПотоков.ЗапускатьИзУказанногоФайла
		|ИЗ
		|	Справочник.ИдентификаторыМенеджераПотоков КАК ИдентификаторыМенеджераПотоков
		|ГДЕ
		|	ИдентификаторыМенеджераПотоков.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, ВыборкаДетальныеЗаписи);
	КонецЕсли;
	
	Возврат СтруктураРеквизитов;
		
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРеквизитыИдентификатораМенеджера(ИдентификаторМенеджера)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ккИдентификаторыМенеджераПотоков.КоличествоПотоков,
	|	ккИдентификаторыМенеджераПотоков.КоличествоЭлементовКолекцииНаПоток
	|ИЗ
	|	Справочник.ИдентификаторыМенеджераПотоков КАК ккИдентификаторыМенеджераПотоков
	|ГДЕ
	|	ккИдентификаторыМенеджераПотоков.Ссылка = &ИдентификаторМенеджера";

	Запрос.УстановитьПараметр("ИдентификаторМенеджера", ИдентификаторМенеджера);

	Выборка = Запрос.Выполнить().Выбрать();

	СтруктураРеквизитов = Новый Структура("КоличествоПотоков,КоличествоЭлементовКолекцииНаПоток");
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, Выборка);
	КонецЕсли;
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ОТЧЕТА

&НаСервереБезКонтекста
Процедура СформироватьДанныеМонитора(ТабДокумент, Знач СтруктураНастроек)
	
	ТабДокумент.АвтоМасштаб = Истина;
	Макет = Обработки.МенеджерФоновыхЗаданий.ПолучитьМакет("МакетМонитора");
		
	СтруктураНастроек.Вставить("Секция_желтый"  , Макет.Рисунки.ЖелтыйШар);   // Задание выполняется
	СтруктураНастроек.Вставить("Секция_красный" , Макет.Рисунки.КрасныйШар);  // Задание завершено с ошибкой
	СтруктураНастроек.Вставить("Секция_зеленый" , Макет.Рисунки.ЗеленыйШар);  // Выполнено успешно
	СтруктураНастроек.Вставить("Секция_серый"   , Макет.Рисунки.СерыйШар);

	// Выполнение запроса.
	МассивЗапросов = ПодготовитьОтчетКВыводуНаПечать(СтруктураНастроек);
	КолВоЗапросов = МассивЗапросов.ВГраница();
	ВыборкаМонитораМенеджера  = МассивЗапросов[КолВоЗапросов-2].Выбрать();
	ВыборкаРабочиеПотоки      = МассивЗапросов[КолВоЗапросов-1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаСтекаДанных        = МассивЗапросов[КолВоЗапросов].Выбрать();

	Если МассивЗапросов.Количество() = 0 
		ИЛИ ВыборкаМонитораМенеджера.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 

	ВывестиМакетМониторМенеджера(ВыборкаМонитораМенеджера, СтруктураНастроек, Макет, ТабДокумент);
	ВывестиМакетРабочиеПотоки(ВыборкаРабочиеПотоки,СтруктураНастроек, Макет, ТабДокумент);
	ВывестиМакетСтекДанных(ВыборкаСтекаДанных, СтруктураНастроек, Макет, ТабДокумент);
	
	Если СтруктураНастроек.СвернутьГруппировки Тогда
		ТабДокумент.ПоказатьУровеньГруппировокСтрок(0);
	КонецЕсли;
	
	//Возврат ТабДокумент;

КонецПроцедуры // СформироватьОтчет()

&НаСервереБезКонтекста
Функция ПодготовитьОтчетКВыводуНаПечать(СтруктураНастроек)

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ккСтекДанных_Мьютекс.ИдентификаторМенеджера,
	|	КОЛИЧЕСТВО(ккСтекДанных_Мьютекс.НомерПорции) КАК КоличествоПорций
	|ПОМЕСТИТЬ втКоличествоОбработанныхПорций
	|ИЗ
	|	РегистрСведений.СтекДанных_Мьютекс КАК ккСтекДанных_Мьютекс
	|ГДЕ
	|	ккСтекДанных_Мьютекс.ИдентификаторМенеджера = &ИдентификаторМенеджера
	|	И (ккСтекДанных_Мьютекс.Обработан
	|			ИЛИ ккСтекДанных_Мьютекс.Ошибка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ккСтекДанных_Мьютекс.ИдентификаторМенеджера
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА ккКоллекцияРабочихПотоков.Состояние = ЗНАЧЕНИЕ(Перечисление.СостояниеРабочегоПотока.Активен)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Активные,
	|	СУММА(ВЫБОР
	|			КОГДА ккКоллекцияРабочихПотоков.Состояние = ЗНАЧЕНИЕ(Перечисление.СостояниеРабочегоПотока.ВОжидании)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВОжидании,
	|	СУММА(ВЫБОР
	|			КОГДА ккКоллекцияРабочихПотоков.Состояние = ЗНАЧЕНИЕ(Перечисление.СостояниеРабочегоПотока.ЗавершенАварийно)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Упавшие,
	|	ккКоллекцияРабочихПотоков.ИдентификаторМенеджера,
	|	СУММА(ВЫБОР
	|			КОГДА ккКоллекцияРабочихПотоков.Состояние = ЗНАЧЕНИЕ(Перечисление.СостояниеРабочегоПотока.Завершен)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Завершенные
	|ПОМЕСТИТЬ втКоличествоПотоков
	|ИЗ
	|	РегистрСведений.КоллекцияРабочихПотоков КАК ккКоллекцияРабочихПотоков
	|ГДЕ
	|	ккКоллекцияРабочихПотоков.ИдентификаторМенеджера = &ИдентификаторМенеджера
	|
	|СГРУППИРОВАТЬ ПО
	|	ккКоллекцияРабочихПотоков.ИдентификаторМенеджера
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ккДанныеМенеджераПотоков.ИдентификаторМенеджера,
	|	ккДанныеМенеджераПотоков.СтартМенеджера_мс,
	|	ккДанныеМенеджераПотоков.ПараметрыМенеджера,
	|	ккДанныеМенеджераПотоков.ДинамическиеПараметры,
	|	ккДанныеМенеджераПотоков.ЖурналМенеджера,
	|	ккДанныеМенеджераПотоков.Длительность_мс,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ккДанныеМенеджераПотоков.КоличествоПорцийВСтеке,0) = 0
	|			ИЛИ ЕСТЬNULL(втКоличествоОбработанныхПорций.КоличествоПорций,0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ втКоличествоОбработанныхПорций.КоличествоПорций / ккДанныеМенеджераПотоков.КоличествоПорцийВСтеке * 100
	|	КОНЕЦ КАК ПроцентВыполнения,
	|	ккДанныеМенеджераПотоков.Завершен,
	|	ЕСТЬNULL(втКоличествоПотоков.Активные, 0) КАК Активные,
	|	ЕСТЬNULL(втКоличествоПотоков.ВОжидании, 0) КАК ВОжидании,
	|	ЕСТЬNULL(втКоличествоПотоков.Упавшие, 0) КАК Упавшие,
	|	ккДанныеМенеджераПотоков.Ошибка,
	|	втКоличествоПотоков.Завершенные
	|ИЗ
	|	РегистрСведений.ДанныеМенеджераПотоков КАК ккДанныеМенеджераПотоков
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКоличествоПотоков КАК втКоличествоПотоков
	|		ПО ккДанныеМенеджераПотоков.ИдентификаторМенеджера = втКоличествоПотоков.ИдентификаторМенеджера
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКоличествоОбработанныхПорций КАК втКоличествоОбработанныхПорций
	|		ПО ккДанныеМенеджераПотоков.ИдентификаторМенеджера = втКоличествоОбработанныхПорций.ИдентификаторМенеджера
	|ГДЕ
	|	ккДанныеМенеджераПотоков.ИдентификаторМенеджера = &ИдентификаторМенеджера
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ккКоллекцияРабочихПотоков.КлючПотока КАК ИдентификаторПотока,
	|	ккКоллекцияРабочихПотоков.Состояние КАК СостояниеПотока,
	|	ВЫБОР
	|		КОГДА ккКоллекцияРабочихПотоков.Состояние = ЗНАЧЕНИЕ(Перечисление.СостояниеРабочегоПотока.Завершен)
	|				ИЛИ ккКоллекцияРабочихПотоков.Состояние = ЗНАЧЕНИЕ(Перечисление.СостояниеРабочегоПотока.Активен)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Завершен,
	|	ВЫБОР
	|		КОГДА ккКоллекцияРабочихПотоков.Состояние = ЗНАЧЕНИЕ(Перечисление.СостояниеРабочегоПотока.ЗавершенАварийно)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Ошибка,
	|	ккКоллекцияРабочихПотоков.НомерПорции КАК НомерПорцииИзСтека,
	|	ккКоллекцияРабочихПотоков.КоличествоПерезапусков,
	|	ккКоллекцияРабочихПотоков.ЖурналПотока КАК ЖурналМенеджера
	|ИЗ
	|	РегистрСведений.КоллекцияРабочихПотоков КАК ккКоллекцияРабочихПотоков
	|ГДЕ
	|	ккКоллекцияРабочихПотоков.ИдентификаторМенеджера = &ИдентификаторМенеджера
	|	И &ПоказатьОшибкиРабочихПотоков
	|
	|ИТОГИ ПО
	|	СостояниеПотока
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ккСтекДанных_Мьютекс.НомерПорции КАК НомерПорции,
	|	ВЫБОР 
	|		КОГДА &ВыводитьДвоичныеДанные 
	|			ТОГДА ккСтекДанных_Мьютекс.ПараметрыПотока
	|	ИНАЧЕ ккСтекДанных_Мьютекс.НомерПорции
	|	КОНЕЦ КАК ПараметрыПотока,
	|	ккСтекДанных_Мьютекс.ЖурналДанных КАК ЖурналМенеджера,
	|	ккСтекДанных_Мьютекс.СтартПотока,
	|	ккСтекДанных_Мьютекс.Ошибка,
	|	ккСтекДанных_Мьютекс.Обработан КАК Завершен,
	|	ккСтекДанных_Мьютекс.Длительность_мс,
	|	ВЫБОР 
	|		КОГДА &ВыводитьДвоичныеДанные 
	|			ТОГДА ккСтекДанных_Мьютекс.ДопПараметрыПорции
	|	ИНАЧЕ ккСтекДанных_Мьютекс.НомерПорции
	|	КОНЕЦ КАК ДинамическиеПараметры,
	|	ккСтекДанных_Мьютекс.КлючПотока КАК КлючПотока
	|ИЗ
	|	РегистрСведений.СтекДанных_Мьютекс КАК ккСтекДанных_Мьютекс
	|ГДЕ
	|	ккСтекДанных_Мьютекс.ИдентификаторМенеджера = &ИдентификаторМенеджера
	|	И &ПоказатьОшибкиСтека
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерПорции";

	Если СтруктураНастроек.ПоказатьОшибки Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
							"&ПоказатьОшибкиРабочихПотоков", 
							"ккКоллекцияРабочихПотоков.Состояние = ЗНАЧЕНИЕ(Перечисление.СостояниеРабочегоПотока.ЗавершенАварийно)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоказатьОшибкиСтека", "ккСтекДанных_Мьютекс.Ошибка = Истина");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоказатьОшибкиРабочихПотоков", "Истина");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоказатьОшибкиСтека", "Истина");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ИдентификаторМенеджера", СтруктураНастроек.ИдентификаторМенеджера);
	Запрос.УстановитьПараметр("ВыводитьДвоичныеДанные", СтруктураНастроек.ВыводитьДвоичныеДанные);

	Возврат Запрос.ВыполнитьПакет();

КонецФункции

&НаСервереБезКонтекста
Процедура ВывестиМакетМониторМенеджера(Выборка, СтруктураНастроек, Макет, ТабличныйДокумент)
	
	// Вывод шапки
	Секция = Макет.ПолучитьОбласть("Шапка");
	Секция.Параметры.ИдентификаторМенеджера = СтруктураНастроек.ИдентификаторМенеджера;
	ТабличныйДокумент.Вывести(Секция);
	
	Секция = Макет.ПолучитьОбласть("Строка");
	ПустаяДата = Дата(1,1,1);
	Пока Выборка.Следующий() Цикл
		
		Секция.Параметры.Заполнить(Выборка);
		Если Выборка.Длительность_мс = 0 и Не Выборка.Ошибка Тогда
			Длительность_с = Окр((ТекущаяУниверсальнаяДатаВМиллисекундах()-Выборка.СтартМенеджера_мс)/1000,1);
		ИначеЕсли Выборка.Завершен Тогда	
			Длительность_с = Окр(Выборка.Длительность_мс/1000,1);
		Иначе	
			Длительность_с = 0;
		КонецЕсли; 
		
		Секция.Параметры.ВремяСтарта = ?(Выборка.СтартМенеджера_мс>0, ПустаяДата + (Выборка.СтартМенеджера_мс/1000), "");
		
		Секция.Параметры.Длительность_с = Длительность_с;
		
		ВывестиСтатусКартинкиВСтроке(Выборка, Секция, СтруктураНастроек, "КартинкаСтатуса");
		
		ПроверитьОФормитьЯчейкуСДвоичнымиДанными(Секция, Выборка.ДинамическиеПараметры, "ДинамическиеПараметры");
		ПроверитьОФормитьЯчейкуСДвоичнымиДанными(Секция, Выборка.ЖурналМенеджера, "ЖурналМенеджера");
				
		ТабличныйДокумент.Вывести(Секция);
		
	КонецЦикла; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВывестиМакетРабочиеПотоки(Выборка, СтруктураНастроек, Макет, ТабличныйДокумент)
	
	Шапка = Макет.ПолучитьОбласть("ШапкаПотока");
	ТабличныйДокумент.Вывести(Шапка);
	
	ОбластьСтроки = Макет.ПолучитьОбласть("СтрокаПотока");
	ОбластьГруппаСтроки = Макет.ПолучитьОбласть("ГруппаСтрокиПотока");
	ТабличныйДокумент.НачатьГруппуСтрок("Все потоки", Истина);
	
	Пока Выборка.Следующий() Цикл
		
		ОбластьГруппаСтроки.Параметры.Заполнить(Выборка);
		ВывестиСтатусКартинкиВСтроке(Выборка, ОбластьГруппаСтроки, СтруктураНастроек, "КартинкаСтатусаГруппыПотока");
		ТабличныйДокумент.Вывести(ОбластьГруппаСтроки);
		
		ТабличныйДокумент.НачатьГруппуСтрок(Выборка.СостояниеПотока, Истина);
		ДетальнаяВыборка = Выборка.Выбрать();
		Пока ДетальнаяВыборка.Следующий() Цикл
			
			ОбластьСтроки.Параметры.Заполнить(ДетальнаяВыборка);
			ВывестиСтатусКартинкиВСтроке(ДетальнаяВыборка, ОбластьСтроки, СтруктураНастроек, "КартинкаСтатусаПотока");
			
			ОбластьСтроки.Области["ЖурналМенеджераПотока"].Текст = "см. журнал менеджера потоков";
			ПроверитьОФормитьЯчейкуСДвоичнымиДанными(ОбластьСтроки, ДетальнаяВыборка.ЖурналМенеджера, "ЖурналМенеджераПотока");
			ТабличныйДокумент.Вывести(ОбластьСтроки);
			
		КонецЦикла;
		
		ТабличныйДокумент.ЗакончитьГруппуСтрок();
		
	КонецЦикла;
	
	ТабличныйДокумент.ЗакончитьГруппуСтрок();

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВывестиМакетСтекДанных(Выборка, СтруктураНастроек, Макет, ТабличныйДокумент)
	
	Шапка = Макет.ПолучитьОбласть("ШапкаСтекаДанных");
	ТабличныйДокумент.Вывести(Шапка);
	
	ОбластьСтроки = Макет.ПолучитьОбласть("СтрокаСтекаДанных");
	ПустаяДата = Дата(1,1,1);
	ТабличныйДокумент.НачатьГруппуСтрок("Все стеки данных", Истина);
	Пока Выборка.Следующий() Цикл
		
		ОбластьСтроки.Параметры.Заполнить(Выборка);
		
		ОбластьСтроки.Параметры.ВремяСтарта = ?(Выборка.СтартПотока>0, ПустаяДата + (Выборка.СтартПотока/1000),"");
		
		ОбластьСтроки.Параметры.Длительность_мс = Окр((Выборка.Длительность_мс)/1000,1);

		Если Выборка.СтартПотока > 0 Тогда
			ВывестиСтатусКартинкиВСтроке(Выборка, ОбластьСтроки, СтруктураНастроек, "КартинкаСтатусаСтека");	
		Иначе
			ОбластьСтроки.Области.КартинкаСтатусаСтека.Картинка = СтруктураНастроек.Секция_серый.Картинка;
		КонецЕсли;	
		
		Если СтруктураНастроек.ВыводитьДвоичныеДанные Тогда
			ПроверитьОФормитьЯчейкуСДвоичнымиДанными(ОбластьСтроки, Выборка.ЖурналМенеджера, "ЖурналМенеджераСтека");
			ПроверитьОФормитьЯчейкуСДвоичнымиДанными(ОбластьСтроки, Выборка.ПараметрыПотока, "ПараметрыПотокаСтека");
			ПроверитьОФормитьЯчейкуСДвоичнымиДанными(ОбластьСтроки, Выборка.ДинамическиеПараметры, "ДинамическиеПараметрыСтека");
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьСтроки);
		
	КонецЦикла;
	
	ТабличныйДокумент.ЗакончитьГруппуСтрок();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВывестиСтатусКартинкиВСтроке(Выборка, ОбластьСтроки, СтруктураНастроек, ИмяОбласти);
	
	Если Выборка.Ошибка Тогда
		ОбластьСтроки.Области[ИмяОбласти].Картинка = СтруктураНастроек.Секция_красный.Картинка;		
	ИначеЕсли Выборка.Завершен Тогда
		ОбластьСтроки.Области[ИмяОбласти].Картинка = СтруктураНастроек.Секция_зеленый.Картинка;
	Иначе
		ОбластьСтроки.Области[ИмяОбласти].Картинка = СтруктураНастроек.Секция_желтый.Картинка;
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроверитьОФормитьЯчейкуСДвоичнымиДанными(ОбластьСтроки, ДвоичныеДанные, ИмяЯчейки)
	
	Если ТипЗнч(ДвоичныеДанные) <> Тип("ХранилищеЗначения") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЯчейки = ДвоичныеДанные.Получить();

	Если ДанныеЯчейки = Неопределено Тогда
		ОбластьСтроки.Области[ИмяЯчейки].Гиперссылка = Ложь;
		ОбластьСтроки.Области[ИмяЯчейки].ЦветТекста  = WebЦвета.Серый;
		ОбластьСтроки.Области[ИмяЯчейки].Шрифт 		 = Новый Шрифт(, , , ,Ложь);
	ИначеЕсли (ТипЗнч(ДанныеЯчейки) = Тип("Структура")
		ИЛИ ТипЗнч(ДанныеЯчейки)= Тип("Массив")
		ИЛИ ТипЗнч(ДанныеЯчейки)= Тип("ТаблицаЗначений"))
		И ДанныеЯчейки.Количество() = 0 Тогда	
		ОбластьСтроки.Области[ИмяЯчейки].Гиперссылка = Ложь;
		ОбластьСтроки.Области[ИмяЯчейки].ЦветТекста  = WebЦвета.Серый;
		ОбластьСтроки.Области[ИмяЯчейки].Шрифт 		 = Новый Шрифт(, , , ,Ложь);
	Иначе	
		ОбластьСтроки.Области[ИмяЯчейки].Гиперссылка = Истина;
		ОбластьСтроки.Области[ИмяЯчейки].ЦветТекста  = WebЦвета.Синий;
		ОбластьСтроки.Области[ИмяЯчейки].Шрифт 		 = Новый Шрифт(, , , ,Истина);
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьДвоичныеДанныеПриИзменении(Элемент)
	
	Если Объект.ВыводитьДвоичныеДанные Тогда
		Ответ = Вопрос(НСтр("ru = 'Данная настройка замедлит процесс формирования отчета.
								|Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Объект.ВыводитьДвоичныеДанные = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры




