//    ИНИЦИАЛИЗАЦИЯ МЕНЕДЖЕРА ПОТОКОВ

// Данная процедура отвечает за инициализацию и запуск менеджера потоков
//Параметры:
//	ИдентификаторМенеджера - Строка 
Процедура ИнициализироватьИЗапуститьМенеджерПотоков(ИдентификаторМенеджера) Экспорт
    МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый структура("Ключ, Состояние",Строка(ИдентификаторМенеджера),СостояниеФоновогоЗадания.Активно)); 
    
    Если МассивФоновыхЗаданий.Количество()> 0 Тогда
        //Интерактивное взаимодействие с пользователем, предложение остановить текущую работу д.б. реализовано в форме
        //Монитора менеджера потоков
        Возврат;
    КонецЕсли; 
    
    //Инициализация параметров Менеджера потока
	СтруктураПараметров  = МенеджерПотоковСлужебный.ИнициализацияПараметровМенеджераПотока(ИдентификаторМенеджера);
	
	//Зафиксируем попытку запуска менеджера в реестре заданий
	МенеджерПотоковСлужебный.ДобавитьЗаписьРеестрЗаданийМенеджер(ИдентификаторМенеджера,СтруктураПараметров);
	
	//Проверим возможность старта Менеджера потоков и подготовим необходимые данные для пуска ядра
	//В случае ошибки:                                       СтруктураПараметров.Отказ                = Истина
	//Если необходимо продолжить работу в случае падения     СтруктураПараметров.ПродолжитьВыполнение = Истина
	ОбработатьСобытиеЯдраМенеджераПотоков("МенеджерПотоковПередЗапуском", СтруктураПараметров);
	
	//Если менеджер уже был запущен, остановим его и все подчиненные потоки
	ОстановитьМенеджерПотоков(ИдентификаторМенеджера, СтруктураПараметров);
	
    Если СтруктураПараметров.ПродолжитьВыполнение Тогда
        //Подготовим стек данных с ошибками к последующей обработке
        МенеджерПотоковСлужебный.СтекДанныхОшибкиПодготовитьКРаботе(СтруктураПараметров);
    иначе
        //Очищаем данные с отбором по Идентитфикатору менеджера
        МенеджерПотоковСлужебный.СтекДанныхПодготовитьКРаботе(СтруктураПараметров);
    КонецЕсли;
    МенеджерПотоковСлужебный.КоллекцияРабочихПотоковПодготовитьКРаботе(СтруктураПараметров);
	Если СтруктураПараметров.Отказ Тогда
		МенеджерПотоковЛогирование.СохранитьЖурналВРеестрМенеджераПотоков(СтруктураПараметров);
		Возврат;//Попытка инициализации не успешна
	КонецЕсли; 
	
	ПараметрыМенеджераПотоков = Новый Массив;
	ПараметрыМенеджераПотоков.Добавить(СтруктураПараметров);
	
	МенеджерПотоковСлужебный.ЗаписатьДанныеМенеджераПотоков(СтруктураПараметров, Ложь);
	Если СтруктураПараметров.РежимОтладки Тогда
		МенеджерПотоковСлужебный.ВыполнитьМетодКонфигурации("ккМенеджерПотоков.СтартМенеджераПотоков", ПараметрыМенеджераПотоков);
	Иначе
		ФоновыеЗадания.Выполнить("МенеджерПотоков.СтартМенеджераПотоков", ПараметрыМенеджераПотоков,ИдентификаторМенеджера,"Менеджер потоков, ключ: {"+ИдентификаторМенеджера+"}");
	КонецЕсли;
	
КонецПроцедуры

//    УПРАВЛЕНИЕ МЕНЕДЖЕРОМ ПОТОКОВ

// Останавливает фоновое задание менеджера потоков и все рабочие потоки, запущенные ранее
//  
//Параметры:
//	ИдентификаторМенеджера - Строка - Произвольная строка(Идентификатор менеджера потоков), позволяющая разделить данные и алгоритмы разных менеджеров потоков.
Процедура ОстановитьМенеджерПотоков(ИдентификаторМенеджера, СтруктураПараметров = Неопределено) Экспорт
    Если СтруктураПараметров = Неопределено Тогда
        
    КонецЕсли; 
    //Остановим сначала менеджер потоков
    МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый структура("Ключ, Состояние",ИдентификаторМенеджера,СостояниеФоновогоЗадания.Активно));
    Для каждого ФоновоеЗадание Из МассивФоновыхЗаданий Цикл
        ФоновоеЗадание.Отменить();
    КонецЦикла;
    
    Если СтруктураПараметров = Неопределено Тогда
        //* TODO: 30 ноября 2018 г. - 17:49 (Андреев М.А.)
        //Переделать текущую реализацию после рефакторинга подсистемы сообщений 
        СтруктураПараметров = Новый Структура("ИдентификаторМенеджера,ЖурналМенеджераПотоков",ИдентификаторМенеджера,Новый Массив); 
    КонецЕсли;
    
    //Остановим все рабочие потоки менеджера
    ОстановитьРабочиеПотоки(СтруктураПараметров);
КонецПроцедуры

// Данная процедура запускается автоматически, как процедура фонового задания из основной программы (Функция ИнициализироватьМенеджерПотоков)
//	Вызываются следующие события: "ПриЗапускеМенеджераПотоков"
//Параметры:
//	СтруктураПараметров - Структура параметров менеджеров потока:
Процедура СтартМенеджераПотоков(СтруктураПараметров) Экспорт
    ЗаписьЖурналаРегистрации("Параметры соединения с базой",,,,СтрокаСоединенияИнформационнойБазы());
	ИдентификаторМенеджера = СтруктураПараметров.ИдентификаторМенеджера;
    КоличествоПотоков = СтруктураПараметров.ДинамическиеПараметры.КоличествоПотоков;

    Если СтруктураПараметров.ПродолжитьВыполнение Тогда 
        //В случае повторной попытки выполнения обработки, не будем собирать информацию о порциях
        //Данные возьмем из регистра "ДанныеМенеджераПотоков"
        СчетчикПотоков = 0;
        СтруктураПараметров.ПолучениеСтекаЗавершено = Истина;
        МенеджерПотоковСлужебный.ЗаписатьДанныеМенеджераПотоков(СтруктураПараметров);
        СтатистикаСтека = МенеджерПотоковСлужебный.СтатистикаОбъектовВСтеке(СтруктураПараметров.ИдентификаторМенеджера);
        КОбработке = СтатистикаСтека.Всего - СтатистикаСтека.Обработан;
        СтруктураПараметров.КоличествоПорцийВСтеке = КОбработке;
	иначе
        //-> Метод библиотеки переопределяемый разработчиком
        ОбработатьСобытиеЯдраМенеджераПотоков("МенеджерПотоковПриЗапуске",СтруктураПараметров);
        //<-
		МенеджерПотоковСлужебный.ОбновитьЗаписьРеестраЗаданийМенеджера(СтруктураПараметров, Ложь);
        МенеджерПотоковСлужебный.ЗаписатьДанныеМенеджераПотоков(СтруктураПараметров);
        Для СчетчикПотоков = 0 По КоличествоПотоков-1 Цикл
            Если НЕ СтруктураПараметров.ПолучениеСтекаЗавершено Тогда
                ПолучитьДанныеДляЗаписиВСтек(СтруктураПараметров);
                ЗапуститьНовыйПоток(СтруктураПараметров);
                РаспределитьПорцииПоОжидающимПотокам(СтруктураПараметров);
            КонецЕсли; 
        КонецЦикла;
    КонецЕсли; 

	ЗавершитьРаботуМенеджераПотоков = Ложь;
	Пока НЕ ЗавершитьРаботуМенеджераПотоков И НЕ СтруктураПараметров.Отказ Цикл
		//В бесконечном цикле пополняем стек пока не установлен флаг
		Если НЕ СтруктураПараметров.ПолучениеСтекаЗавершено Тогда
			ПолучитьДанныеДляЗаписиВСтек(СтруктураПараметров);
		Иначе
			//Если стек получен и все объекты из стека обработаны, тогда завершаем работу Менеджера потока
			СтатистикаСтека = МенеджерПотоковСлужебный.СтатистикаОбъектовВСтеке(СтруктураПараметров.ИдентификаторМенеджера);
            КОбработке = СтатистикаСтека.Всего - СтатистикаСтека.Обработан - СтатистикаСтека.Ошибка;
			Если КОбработке = 0 Тогда
				ЗавершитьРаботуМенеджераПотоков = Истина;
				Продолжить;
			иначе
				МенеджерПотоковСлужебный.Sleep(1000);
			КонецЕсли; 
		КонецЕсли; 
                    
		ДинамическиеПараметры = МенеджерПотоковСлужебный.ПолучитьДинамическиеПараметрыПользователя(ИдентификаторМенеджера);
		СтруктураПараметров.Вставить("ДинамическиеПараметры", ДинамическиеПараметры);
        КоличествоПотоков = СтруктураПараметров.ДинамическиеПараметры.КоличествоПотоков;

        Если СчетчикПотоков < КоличествоПотоков Тогда
            //Увеличим количество потоков
            Пока СчетчикПотоков < КоличествоПотоков И СчетчикПотоков < СтруктураПараметров.КоличествоПорцийВСтеке Цикл
                ЗапуститьНовыйПоток(СтруктураПараметров);	
                СчетчикПотоков = СчетчикПотоков+1;
            КонецЦикла;
        ИначеЕсли СчетчикПотоков > КоличествоПотоков  Тогда //Уменьшим количество потоков
            УменьшитьКоличествоПотоковПоНастройкам(СтруктураПараметров, СчетчикПотоков);
        КонецЕсли; 
        
        РаспределитьПорцииПоОжидающимПотокам(СтруктураПараметров);

        ПерезапуститьПотокиВСлучаеИхПадения(СтруктураПараметров);  
	КонецЦикла;
    	
	ОстановитьРабочиеПотоки(СтруктураПараметров);	
	//Обновим данные менеджера потоков и запишем журнал менеджера
	МенеджерПотоковСлужебный.ЗаписатьДанныеМенеджераПотоков(СтруктураПараметров, Истина);
	
	СтатистикаСтека = МенеджерПотоковСлужебный.СтатистикаОбъектовВСтеке(СтруктураПараметров.ИдентификаторМенеджера);
	
	СтруктураПараметров.Вставить("СтатистикаСтека", СтатистикаСтека); 
	//-> Метод библиотеки переопределяемый разработчиком
	ОбработатьСобытиеЯдраМенеджераПотоков("МенеджерПотоковЗавершениеРаботы",СтруктураПараметров);
	//<-
	МенеджерПотоковСлужебный.ОбновитьЗаписьРеестраЗаданийМенеджера(СтруктураПараметров, Истина);
КонецПроцедуры

//    УПРАВЛЕНИЕ ПОТОКАМИ

// Данная процедура отслеживает падения потоков и перезапускает их.
//Параметры:
//	СтруктураПараметров - Структура параметров менеджера потока:
Процедура ПерезапуститьПотокиВСлучаеИхПадения(СтруктураПараметров)
	Если СтруктураПараметров.Отказ  Тогда
	   Возврат;
	КонецЕсли; 
	ИдентификаторМенеджера          = СтруктураПараметров.ИдентификаторМенеджера;
	ПределКоличествоПопытокОбработатьОбъект = СтруктураПараметров.ПределКоличествоПопытокОбработатьОбъект;
	
	Результат = МенеджерПотоковСлужебный.РезультатАктивныеРабочиеПотоки(СтруктураПараметров.ИдентификаторМенеджера);
	//Все потоки упали предел по перезапускам исчерпан
	Если Результат.Пустой() Тогда
	     СтруктураПараметров.Отказ = Истина;
	КонецЕсли; 
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый структура("Ключ, Состояние",Выборка.КлючПотока,СостояниеФоновогоЗадания.Активно)); 
		
		Если МассивФоновыхЗаданий.Количество() = 0 Тогда
			//Фоновое задание завершилось по каким-то причинам, перезапустим его
			ДанныеПотока = Новый Структура;
			ДанныеПотока.Вставить("Состояние"                , Перечисления.СостояниеРабочегоПотока.ВОжидании);
			ДанныеПотока.Вставить("КлючПотока"              ,  Выборка.КлючПотока); 
            Если (Выборка.КоличествоПерезапусков < ПределКоличествоПопытокОбработатьОбъект) Тогда
                КоличествоПерезапусков = Выборка.КоличествоПерезапусков + 1;   
                Если СтруктураПараметров.РежимОтладки Тогда
                    КоличествоПерезапусков = 0;
                КонецЕсли; 
                ДанныеПотока.Вставить("КоличествоПерезапусков", КоличествоПерезапусков);
                ДанныеПотока.Вставить("ОбработатьПадениеПотока",Истина);
                //По каждому упавшему потоку проверяем количество падений с данным набором данных
                //если вышли за лимит попыток прерываем попытки его запустить и устанавливаем признак ошибки
                //если попытки еще есть - запускаем новый поток
                ЗапуститьНовыйПоток(СтруктураПараметров, ДанныеПотока);
			Иначе
				//Обновим статус записи в коллекции
				ДанныеПотока.Вставить("Состояние"                , Перечисления.СостояниеРабочегоПотока.ЗавершенАварийно);
				МенеджерПотоковСлужебный.ЗаписатьДанныеРабочегоПотока(СтруктураПараметров,ДанныеПотока.КлючПотока, ДанныеПотока);
				Если СтруктураПараметров.РежимОтладки Тогда
					//В режиме отладки будем создавать новый "поток", поэтому статистику в мониторе нужно анализировать с поправкой на эту особенность
					ДанныеПотока.Вставить("Состояние"                , Перечисления.СостояниеРабочегоПотока.ВОжидании);
					ДанныеПотока.Вставить("КлючПотока"              , Новый УникальныйИдентификатор);
					ДанныеПотока.Вставить("КоличествоПерезапусков", 0);
					ДанныеПотока.Вставить("ОбработатьПадениеПотока" , Ложь);
					ЗапуститьНовыйПоток(СтруктураПараметров, ДанныеПотока);
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

// Данная процедура отвечает за запуск нового или перезапуск "упавшего" потока (фонового задания).
//Параметры:
//	СтруктураПараметров - Структура - Содержит:
//	ПараметрыПотока    - Структура - Данный параметр передается в перезапуска "упавшего" потока.
Процедура ЗапуститьНовыйПоток(СтруктураПараметров, ПараметрыПотока = Неопределено)
	Если СтруктураПараметров.Отказ Тогда
		Возврат;
	КонецЕсли;
	
    Если ПараметрыПотока = Неопределено Тогда
		ПараметрыПотока = Новый Структура;
		ПараметрыПотока.Вставить("Состояние"               , Перечисления.СостояниеРабочегоПотока.ВОжидании);
		ПараметрыПотока.Вставить("КлючПотока"              , Новый УникальныйИдентификатор);
		ПараметрыПотока.Вставить("КоличествоПерезапусков"  , 0);
		ПараметрыПотока.Вставить("ОбработатьПадениеПотока" , Ложь);
    КонецЕсли;
    
	//Обеспечим потоко-защищенность параметров управляющего потока (Менеджера потоков)
	ПараметрыПотока.Вставить("ИдентификаторМенеджера",   СтруктураПараметров.ИдентификаторМенеджера);
	ПараметрыПотока.Вставить("ИдентификаторНаименование",СтруктураПараметров.ИдентификаторНаименование);
	ПараметрыПотока.Вставить("РежимОтладки",             СтруктураПараметров.РежимОтладки);
	ПараметрыПотока.Вставить("ДинамическиеПараметры",    СтруктураПараметров.ДинамическиеПараметры);
	ПараметрыПотока.Вставить("ПараметрыРазработчика",    СтруктураПараметров.ПараметрыРазработчика);
    ПараметрыПотока.Вставить("СтруктураОбработчикаЯдра", СтруктураПараметров.СтруктураОбработчикаЯдра);	
    ПараметрыПотока.Вставить("ПродолжитьВыполнение",     СтруктураПараметров.ПродолжитьВыполнение);
    
    МенеджерПотоковСлужебный.ЗаписатьДанныеРабочегоПотока(СтруктураПараметров,ПараметрыПотока.КлючПотока, ПараметрыПотока);
    
    Если СтруктураПараметров.Отказ Тогда
	   Возврат;
	КонецЕсли; 
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(ПараметрыПотока);
	Если СтруктураПараметров.РежимОтладки Тогда
		МенеджерПотоковСлужебный.ВыполнитьМетодКонфигурации("ккМенеджерПотоков.ВыполнениеПотока", МассивПараметров);
	Иначе
		//+++ 2020/01/29 ПТР Сергиенко С.С. DEV1C-4967
		НаименованиеРабочегоПотока = "Рабочий поток, идентификатор/ключ: {" + СтруктураПараметров.ИдентификаторНаименование + "} / {" + ПараметрыПотока.КлючПотока + "}";
		ФоновыеЗадания.Выполнить("МенеджерПотоков.ВыполнениеПотока",
			МассивПараметров,
			ПараметрыПотока.КлючПотока,
			НаименованиеРабочегоПотока
			//"Рабочий поток, ключ: {"+ПараметрыПотока.КлючПотока+"}"
			);
		//--- 2020/01/29 ПТР Сергиенко С.С. DEV1C-4967
	КонецЕсли;
КонецПроцедуры

// Данная процедура запускается автоматически, как процедура фонового задания из менеджера потоков 
//Параметры:
//	СтруктураПараметров - Структура - Параметры менеджера потока.
//	ДанныеПотока.КлючПотока - Строка - Содержит ключ рабочего потока  
Процедура ВыполнениеПотока(ПараметрыПотока) Экспорт
	ПараметрыПотока.Вставить("ЖурналМенеджераПотоков"               ,Новый Массив);
	ПараметрыПотока.Вставить("ОбработкаСтекаЗавершена"              ,Истина);	
	ПараметрыПотока.Вставить("Отказ"                                ,Ложь);
	ПараметрыПотока.Вставить("ОшибкаОбработкиДанных"                ,Ложь);
	ПараметрыПотока.Вставить("ОжидатьМс"                            ,1000);
    ПараметрыПотока.Вставить("Состояние",  Перечисления.СостояниеРабочегоПотока.ВОжидании);

    
	ИдентификаторМенеджера = ПараметрыПотока.ИдентификаторМенеджера;
	Пока НЕ ПараметрыПотока.Отказ Цикл
		ПараметрыПотока.Вставить("ОшибкаОбработкиДанных"                ,Ложь);
		ПараметрыПотока.Вставить("ЖурналМенеджераПотоков"               ,Новый Массив);
		
        МенеджерПотоковСлужебный.РабочийПотокПолучитьДанныеИзСтекаПоКлючуПотока(ИдентификаторМенеджера, ПараметрыПотока, ПараметрыПотока.КлючПотока);
        
		Если ПараметрыПотока.Отказ Тогда
			//Скоррее всего рухнул на блокировке
			МенеджерПотоковСлужебный.ЗаписатьДанныеРабочегоПотока(ПараметрыПотока,ПараметрыПотока.КлючПотока,Новый Структура("Состояние",  Перечисления.СостояниеРабочегоПотока.ЗавершенАварийно) ); 
			Продолжить;
		КонецЕсли;
		
        Если ПараметрыПотока.Состояние = Перечисления.СостояниеРабочегоПотока.Активен Тогда
			//сбросим счетчик ожидания
			ПараметрыПотока.Вставить("ОжидатьМс"                            ,1000);
			
			//-> Метод библиотеки переопределяемый разработчиком
			ОбработатьСобытиеЯдраМенеджераПотоков("РабочийПотокВыполнитьОбработкуДанных",ПараметрыПотока);
			//<-
			
			//После пользовательской обработки может возникнуть ошибка
			МенеджерПотоковСлужебный.РабочийПотокОбновитьДанныеСтека(ПараметрыПотока);
            
            Если ПараметрыПотока.Отказ Тогда
				ПараметрыПотока.Вставить("Состояние",  Перечисления.СостояниеРабочегоПотока.ЗавершенАварийно);
			Иначе
				ПараметрыПотока.Вставить("Состояние",  Перечисления.СостояниеРабочегоПотока.ВОжидании);
			КонецЕсли;
            
            ДопПараметры = Новый Структура();
            ДопПараметры.Вставить("НомерПорции",0);
            ДопПараметры.Вставить("Состояние"  ,  ПараметрыПотока.Состояние);
            МенеджерПотоковСлужебный.ЗаписатьДанныеРабочегоПотока(ПараметрыПотока,ПараметрыПотока.КлючПотока,ДопПараметры);
		иначе
				Если ПараметрыПотока.РежимОтладки Тогда
					Прервать;
				КонецЕсли;
				МенеджерПотоковСлужебный.Sleep(ПараметрыПотока.ОжидатьМс);
                //* TODO: 12 декабря 2018 г. - 13:18 (Андреев М.А.)
                //Поставим в слип, рассмотреть вариант того чтобы гасить такие потоки 
                Если ПараметрыПотока.ОбработкаСтекаЗавершена Тогда
                    ПараметрыПотока.ОжидатьМс = ПараметрыПотока.ОжидатьМс+1000;
                КонецЕсли;
				//Подождем наполнение стека, или окончание работы менеджером потока
				МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый структура("Ключ, Состояние",ИдентификаторМенеджера,СостояниеФоновогоЗадания.Активно));
				//если менеджер потоков упал, завершим рабочий поток.
				Если МассивФоновыхЗаданий.Количество() = 0 Тогда
					Сообщение = "ВыполнениеПотока: Обнаружено, что менеджер потоков, неактивен, возможно ""упал"".
					|Параметры: КлючПотока("+ПараметрыПотока.КлючПотока+") Предыдущее состояние рабочего потока: ("+ДопПараметры.Состояние+")";
					//Сообщение = НСтр("ru = """+Сообщение+"""");
					МенеджерПотоковЛогирование.ЗаписатьСобытие(ПараметрыПотока,УровеньЖурналаРегистрации.Предупреждение,ТекущаяДатаСеанса(),Сообщение); 
					ДопПараметры.Вставить("Состояние",  Перечисления.СостояниеРабочегоПотока.ЗавершенАварийно);
					МенеджерПотоковСлужебный.ЗаписатьДанныеРабочегоПотока(ПараметрыПотока,ПараметрыПотока.КлючПотока,ДопПараметры);
					ПараметрыПотока.Отказ = Истина;
				КонецЕсли; 		
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

// Данная процедура останавливает все запущенные потоки.
//Параметры:
//	СтруктураПараметров - Структура параметров менеджера потока:
Процедура ОстановитьРабочиеПотоки(СтруктураПараметров = Неопределено)
	Результат = МенеджерПотоковСлужебный.РезультатАктивныеРабочиеПотоки(СтруктураПараметров.ИдентификаторМенеджера);
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый структура("Ключ, Состояние",Выборка.КлючПотока,СостояниеФоновогоЗадания.Активно));
		Для каждого ФоновоеЗадание Из МассивФоновыхЗаданий Цикл
			ФоновоеЗадание.Отменить();
		КонецЦикла;
        ДанныеПотока = Новый Структура("Состояние",Перечисления.СостояниеРабочегоПотока.Завершен);
        МенеджерПотоковСлужебный.ЗаписатьДанныеРабочегоПотока(СтруктураПараметров,Выборка.КлючПотока,ДанныеПотока);
	КонецЦикла;
	
КонецПроцедуры

// Данная процедура отвечает за уменьшение количества потоков в соответствии с дин. настройками (фоновых заданий).
//Параметры:
//	СтруктураПараметров - Структура - Содержит:
//	СчетчикПотоков      - число     - актуальное количество запущеных потоков.
Процедура УменьшитьКоличествоПотоковПоНастройкам(СтруктураПараметров, СчетчикПотоков)

    КоличествоПотоков = СтруктураПараметров.ДинамическиеПараметры.КоличествоПотоков;

    Если СтруктураПараметров.Отказ Тогда
		Возврат;
	КонецЕсли;
    
    ВыборкаДетальныеЗаписи = МенеджерПотоковСлужебный.ВыбратьОжидающиеПотокиБезНагрузки(СтруктураПараметров);
    
    Пока ВыборкаДетальныеЗаписи.Следующий() И СчетчикПотоков > КоличествоПотоков Цикл
        //1. Получить ключ потока который не выполняет полезную нагрузку
        КлючПотока  = ВыборкаДетальныеЗаписи.КлючПотока;
        
        ДопПараметры = Новый Структура();
        ДопПараметры.Вставить("Состояние"  , Перечисления.СостояниеРабочегоПотока.Завершен);
        МенеджерПотоковСлужебный.ЗаписатьДанныеРабочегоПотока(СтруктураПараметров,КлючПотока,ДопПараметры);
        
        МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый структура("Ключ, Состояние",КлючПотока, СостояниеФоновогоЗадания.Активно)); 
        Для каждого ФоновоеЗадание Из МассивФоновыхЗаданий Цикл
			ФоновоеЗадание.Отменить();
		КонецЦикла;

        СчетчикПотоков = СчетчикПотоков-1;
    КонецЦикла;

 КонецПроцедуры


//    ОБРАБОТЧИКИ МЕНЕДЖЕРА ПОТОКОВ

// Базовая процедура обработки событий ядра менеджера потоков. 
//Параметры:
//	СтруктураПараметров - Структура 
Процедура ОбработатьСобытиеЯдраМенеджераПотоков(ИмяСобытия, СтруктураПараметров) Экспорт
	Если СтруктураПараметров.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОбработчикаСобытий = СтруктураПараметров.СтруктураОбработчикаЯдра;
	МодульСобытийЯдра = СтруктураОбработчикаСобытий.МодульСобытийЯдра;
	Если СтруктураОбработчикаСобытий.Внешний = Истина Тогда
		
		Если СтруктураОбработчикаСобытий.ЗапускатьИзУказанногоФайла Тогда
			
			ВнешняяОбработка = ВнешниеОбработки.Создать(СтруктураОбработчикаСобытий.ИмяФайлаОбработки);
			ВнешняяОбработка.ОбработатьСобытиеМенеджераПотоков(ИмяСобытия, СтруктураПараметров);
			
		Иначе
			
			Если ТипЗнч(СтруктураОбработчикаСобытий.МодульСобытийЯдра) = Тип("ХранилищеЗначения") Тогда
				
				МодульСобытийЯдра = МодульСобытийЯдра.Получить();
				
			ИначеЕсли СтруктураОбработчикаСобытий.МодульСобытийЯдра = Неопределено Тогда
				
				ТекстСообщения = НСтр("ru ='Для данного идентификатора не верно указана внешняя обработка настроек.'");
				ВызватьИсключение ТекстСообщения;
				
			КонецЕсли;
			
			ИмяВремФайла = ПолучитьИмяВременногоФайла("epf");
			МодульСобытийЯдра.Записать(ИмяВремФайла);
			ВнешняяОбработка = ВнешниеОбработки.Создать(ИмяВремФайла);
			ВнешняяОбработка.ОбработатьСобытиеМенеджераПотоков(ИмяСобытия, СтруктураПараметров);
			УдалитьФайлы(ИмяВремФайла);
			
		КонецЕсли;
		
	Иначе
		
		МассивПараметров = Новый Массив();
		МассивПараметров.Добавить(ИмяСобытия);
		МассивПараметров.Добавить(СтруктураПараметров);
		МенеджерПотоковСлужебный.ВыполнитьМетодКонфигурации(МодульСобытийЯдра,МассивПараметров)
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьДанныеДляЗаписиВСтек(СтруктураПараметров)
	Если СтруктураПараметров.Отказ Тогда
		Возврат;
	КонецЕсли; 
	//Перед запуском добавления порции в стек, необходимо получить свободный номер порции
	МенеджерПотоковСлужебный.МенеджерПотоковПолучитьНомерПорции(СтруктураПараметров);
	//-> Метод библиотеки переопределяемый разработчиком
	ОбработатьСобытиеЯдраМенеджераПотоков("МенеджерПотоковПолучитьДанныеДляЗаписиВСтек", СтруктураПараметров);
	//<-
	Если НЕ СтруктураПараметров.ПолучениеСтекаЗавершено Тогда
		МенеджерПотоковСлужебный.МенеджерПотоковЗаписатьДанныеВСтек(СтруктураПараметров);	
	КонецЕсли; 
КонецПроцедуры

//Данная процедура распределяет не захваченные порции по потокам которые находятся в ожиидании. 
//Параметры:
//	СтруктураПараметров - Структура 
Процедура РаспределитьПорцииПоОжидающимПотокам(СтруктураПараметров)
    
    ВыборкаДетальныеЗаписи = МенеджерПотоковСлужебный.ВыбратьОжидающиеПотокиБезНагрузки(СтруктураПараметров);
    
    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        КлючПотока  = ВыборкаДетальныеЗаписи.КлючПотока;
        НомерПорции = МенеджерПотоковСлужебный.МенеджерПотоковВернутьНомерПорцииНеЗахвачен(СтруктураПараметров);
        Если НомерПорции = Неопределено Тогда
            //Нет свободных порций к обработке
            Возврат;	
        КонецЕсли;
        НачатьТранзакцию();
        МенеджерПотоковСлужебный.МенеджерПотоковОтметкаПорцииПоНомеру(СтруктураПараметров,НомерПорции, КлючПотока);
        МенеджерПотоковСлужебный.МенеджерПотоковПередачаНомераВРабочийПоток(СтруктураПараметров,НомерПорции, КлючПотока);
        Если СтруктураПараметров.Отказ Тогда
            ОтменитьТранзакцию();
            Возврат;	
        КонецЕсли; 
        ЗафиксироватьТранзакцию();
    КонецЦикла;
КонецПроцедуры
  
//    ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ