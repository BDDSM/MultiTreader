
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура МенеджерПотоковПередЗапуском(СтруктураПараметров) Экспорт
	    
    Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
    |   ккРеестрЗаданийМенеджераФЗ.ПериодРегистрации КАК ПериодРегистрации,
    |   ккРеестрЗаданийМенеджераФЗ.ВРаботе,
    |   ккРеестрЗаданийМенеджераФЗ.КоличествоПорций,
    |   ккРеестрЗаданийМенеджераФЗ.НастройкиЗадания
    |ИЗ
    |   РегистрСведений.РеестрЗаданийМенеджераФЗ КАК ккРеестрЗаданийМенеджераФЗ
    |ГДЕ
    |   НЕ ккРеестрЗаданийМенеджераФЗ.Завершен
    |   И ккРеестрЗаданийМенеджераФЗ.ИдентификаторМенеджера = &ИдентификаторМенеджера
    |
    |УПОРЯДОЧИТЬ ПО
    |   ПериодРегистрации";
    
    Запрос.УстановитьПараметр("ИдентификаторМенеджера", СтруктураПараметров.ИдентификаторМенеджера);
    
	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		СтруктураПараметров.Отказ = Истина;
		Сообщение = НСтр("ru = 'МенеджерПотоковПередЗапуском: Не найдено записей в реестре запуска <<Реестр заданий менеджера ФЗ>>>.'") ;
		МенеджерПотоковЛогирование.ЗаписатьСобытие(СтруктураПараметров,УровеньЖурналаРегистрации.Предупреждение,ТекущаяДатаСеанса(), Сообщение);
		Возврат;
	КонецЕсли;
	    
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ПериодРегистрации = ВыборкаДетальныеЗаписи.ПериодРегистрации;
        НастройкиЗадания  = ВыборкаДетальныеЗаписи.НастройкиЗадания;
	КонецЦикла;
    
    СтруктураДопНастроек = НастройкиЗадания.Получить();
    
    Если НЕ (СтруктураДопНастроек = Неопределено) и  НЕ (СтруктураДопНастроек.Количество() = 0) Тогда
        
        Если СтруктураДопНастроек.КлючТипМетаданных = "Документы" Тогда
            ТипМетаданных        = "Документ";
        ИначеЕсли СтруктураДопНастроек.КлючТипМетаданных = "Справочники"  Тогда	
            ТипМетаданных        = "Справочник"
        иначе
            Возврат;
        КонецЕсли; 
        ИмяМетаданных        = СтруктураДопНастроек.КлючИмяМетаданных;
        РежимИзмененияДанных = СтруктураДопНастроек.КлючРежимИзмененияДанных;
        Отборы               = СтруктураДопНастроек.КлючОтборы.Получить();
    иначе
        СтруктураПараметров.Отказ = Истина;
		Сообщение = НСтр("ru = 'МенеджерПотоковПередЗапуском: Не определены настройки для запуска задания: '") ;
        Сообщение = Сообщение+СтруктураПараметров.ИдентификаторНаименование;
        МенеджерПотоковЛогирование.ЗаписатьСобытие(СтруктураПараметров,УровеньЖурналаРегистрации.Предупреждение,ТекущаяДатаСеанса(), Сообщение);
		Возврат;
    КонецЕсли; 
    
    
	ПериодИзменения      = ПериодРегистрации;

	Запрос = Новый Запрос;
	СформироватьЗапрос(Запрос, ТипМетаданных, ИмяМетаданных, РежимИзмененияДанных, Отборы);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫБРАТЬ", "ВЫБРАТЬ ПЕРВЫЕ 1");
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		СтруктураПараметров.Отказ = Истина;
		Сообщение = НСтр("ru = 'МенеджерПотоковПередЗапуском: Не найдено данных для обработки.'") ;
		МенеджерПотоковЛогирование.ЗаписатьСобытие(СтруктураПараметров, УровеньЖурналаРегистрации.Ошибка, ТекущаяДатаСеанса(), Сообщение);
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров.ПараметрыРазработчика.Вставить("ПериодИзменения" , ПериодИзменения);
	СтруктураПараметров.ПараметрыРазработчика.Вставить("ТипМетаданных" ,   ТипМетаданных);
	СтруктураПараметров.ПараметрыРазработчика.Вставить("ИмяМетаданных" ,   ИмяМетаданных);
	СтруктураПараметров.ПараметрыРазработчика.Вставить("РежимИзмененияДанных" , РежимИзмененияДанных);
	СтруктураПараметров.ПараметрыРазработчика.Вставить("Отборы", Отборы);
	
КонецПроцедуры

// Параметры:
//    СтруктураПараметров.ПараметрыРазработчика 
//    СтруктураПараметров.КоличествоПорцийВСтеке  (Число)    - полная глубина стека, для определения % выполненной работы
//    СтруктураПараметров.Отказ                   (Булево)   - Флаг сигнализирующий об ошибке Менеджера потока
// Журнал событий (Ошибка, Предупреждение, Информация), пример:
//    МенеджерПотоковЛогирование.ЗаписатьСобытие(ПараметрыМенеджера,УровеньЖурналаРегистрации.Ошибка,ТекущаяДатаСеанса(),Сообщение);
Процедура МенеджерПотоковПриЗапуске(СтруктураПараметров) Экспорт
	
	СтруктураПараметров.КоличествоПорцийВСтеке = 0;
	
	ПараметрыОбработкиДанных = СтруктураПараметров.ПараметрыРазработчика;
	Запрос = Новый Запрос;
	СформироватьЗапрос(Запрос, 
		ПараметрыОбработкиДанных.ТипМетаданных, 
		ПараметрыОбработкиДанных.ИмяМетаданных,
		ПараметрыОбработкиДанных.РежимИзмененияДанных,
		ПараметрыОбработкиДанных.Отборы);

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		СтруктураПараметров.ПолучениеСтекаЗавершено = Истина;
	Иначе
		МассивСсылок = Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли; 
	
	СтруктураПараметров.ПараметрыРазработчика.Вставить("МассивСсылок" , МассивСсылок);
	СтруктураПараметров.ПараметрыРазработчика.Вставить("КоличествоДанных", МассивСсылок.Количество());
	СтруктураПараметров.КоличествоПорцийВСтеке = Окр(МассивСсылок.Количество()/СтруктураПараметров.КоличествоЭлементовКолекцииНаПоток+0.5,0,0);
	
КонецПроцедуры

Процедура МенеджерПотоковПолучитьДанныеДляЗаписиВСтек(СтруктураПараметров) Экспорт

	МассивДанных = СтруктураПараметров.ПараметрыРазработчика.МассивСсылок;
	НомерПорции = СтруктураПараметров.НомерПорции;
	
	КоличествоЭлементовНаПоток = СтруктураПараметров.КоличествоЭлементовКолекцииНаПоток;
	КоличествоДанных = СтруктураПараметров.ПараметрыРазработчика.КоличествоДанных;
	
	НачалоПорцииСтека = КоличествоЭлементовНаПоток * (НомерПорции-1);
	КонецПорцииСтека = КоличествоЭлементовНаПоток * НомерПорции;
	
	Если НачалоПорцииСтека > КоличествоДанных Тогда
		СтруктураПараметров.ПолучениеСтекаЗавершено = Истина;
		Возврат;
	КонецЕсли;
	
	МассивПотока = Новый Массив;
	Для Ном = НачалоПорцииСтека По КонецПорцииСтека - 1 Цикл
		
		Если Ном = КоличествоДанных Тогда
			Прервать;
		КонецЕсли;
		
		МассивПотока.Добавить(МассивДанных.Получить(Ном));
		
	КонецЦикла;

	СтруктураПараметров.ПараметрыПотока = Новый ХранилищеЗначения(МассивПотока);

КонецПроцедуры

Процедура РабочийПотокВыполнитьОбработкуДанных(СтруктураПараметров) Экспорт

	РежимИзмененияДанных = СтруктураПараметров.ПараметрыРазработчика.РежимИзмененияДанных;
	МассивСсылок         = СтруктураПараметров.ПараметрыПотока.Получить();
	
	ОбработатьДанные(СтруктураПараметров, МассивСсылок, РежимИзмененияДанных, СтруктураПараметров.ОшибкаОбработкиДанных);

КонецПроцедуры

//Срабатывает в потоке "Менеджера", после того как остановлены все рабочие потоки
//Параметры:
//    СтруктураПараметров.Отказ                    (Булево)   - Флаг сигнализирующий об ошибке Менеджера потока
//    СтруктураПараметров.СтатистикаСтека          (Структура)  Структура("Всего, Ошибка, Обработан") 
//Журнал событий (Ошибка, Предупреждение, Информация), пример:
//    МенеджерПотоковЛогирование.ЗаписатьСобытие(ПараметрыМенеджера,УровеньЖурналаРегистрации.Ошибка,ТекущаяДатаСеанса(),Сообщение);
Процедура МенеджерПотоковЗавершениеРаботы(СтруктураПараметров) Экспорт
    Если Не РегистрыНакопления.ПартииТоваровНаСкладах.ПолучитьИспользованиеИтогов() Тогда
        РегистрыНакопления.ПартииТоваровНаСкладах.УстановитьИспользованиеИтогов(Истина);
    КонецЕсли;
    
    //Если ошибка в менеджере финалить не будем  или есть не обработанные
    КоличествоНеОбработанных = СтруктураПараметров.СтатистикаСтека.Всего - СтруктураПараметров.СтатистикаСтека.Обработан;
    Если СтруктураПараметров.Отказ ИЛИ КоличествоНеОбработанных <> 0 Тогда
        Возврат;
    КонецЕсли;
    
    ПериодРегистрации = СтруктураПараметров.ПараметрыРазработчика.ПериодИзменения;

	НаборЗаписей = РегистрыСведений.РеестрЗаданийМенеджераФЗ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПериодРегистрации.Установить(ПериодРегистрации);
    НаборЗаписей.Отбор.ИдентификаторМенеджера.Установить(СтруктураПараметров.ИдентификаторМенеджера);
	НаборЗаписей.Прочитать();             
	НаборЗаписей[0].Завершен = Истина;
	НаборЗаписей[0].КоличествоПорций =  СтруктураПараметров.СтатистикаСтека.Всего;
	НаборЗаписей.Записать();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПолучитьТекстЗапросаШаблон()

	Возврат
	"ВЫБРАТЬ
	|	ТаблицаСсылок.Ссылка КАК Ссылка
	|	
	|ИЗ
	|	%Тип%.%Имя% КАК ТаблицаСсылок
	|ГДЕ 
	|	ТаблицаСсылок.ПометкаУдаления = Ложь";

КонецФункции

Процедура СформироватьЗапрос(Запрос, ТипМетаданных, ИмяМетаданных, РежимИзмененияДанных, Отборы)

	ТекстЗапроса = ПолучитьТекстЗапросаШаблон();

	Если РежимИзмененияДанных = "ОтменаПроведения" Тогда
		ТекстЗапроса = ТекстЗапроса + " И ТаблицаСсылок.Проведен = Истина";
	ИначеЕсли РежимИзмененияДанных = "Проведение" Тогда
		ТекстЗапроса = ТекстЗапроса + " И ТаблицаСсылок.Проведен = Ложь";
	КонецЕсли;

	НомерПараметра = 0;
	Для каждого ТекОтбор Из Отборы Цикл
		
		ИмяПоляОтбора = ТекОтбор.ИмяПоляОтбора;
		ИмяПараметра  = "Параметр"+НомерПараметра;
		ТекстЗапроса = ТекстЗапроса + " И ТаблицаСсылок." + ИмяПоляОтбора
		                            + " " + ПолучитьВидСравненияДляЗапроса(ТекОтбор)
		                            + " (&" + ИмяПараметра + ")";
		Запрос.УстановитьПараметр(ИмяПараметра, ТекОтбор.ЗначениеОтбора);
		НомерПараметра = НомерПараметра + 1;
	КонецЦикла;

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Тип%", ТипМетаданных);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Имя%", ИмяМетаданных);
	Запрос.Текст = ТекстЗапроса;
	
КонецПроцедуры

Функция ПолучитьВидСравненияДляЗапроса(СтруктураОтбора) Экспорт

	Если НЕ СтруктураОтбора.Свойство("ВидСравненияОтбора") Тогда
		Возврат "=";
    ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Равно ИЛИ
              СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.Равно Тогда
		Возврат "=";
    ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.НеРавно ИЛИ 
              СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеРавно Тогда
		Возврат "<>";
    ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке ИЛИ
              СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.ВСписке Тогда
		Возврат "В";
    ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.НеВСписке ИЛИ 
              СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеВСписке Тогда
		Возврат "НЕ В";
    ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВИерархии ИЛИ 
              СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.ВИерархии Тогда
		Возврат "В ИЕРАРХИИ";
    ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии ИЛИ 
              СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.ВСпискеПоИерархии Тогда
		Возврат "В ИЕРАРХИИ";
	ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии ИЛИ 
              СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеВСпискеПоИерархии Тогда
		Возврат "НЕ В ИЕРАРХИИ";
    ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.НеВИерархии ИЛИ
              СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеВИерархии Тогда
		Возврат "НЕ В ИЕРАРХИИ";
    ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Больше ИЛИ
              СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.Больше Тогда
		Возврат ">";
    ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.БольшеИлиРавно ИЛИ
              СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.БольшеИлиРавно Тогда
		Возврат ">=";
    ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Меньше ИЛИ
              СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.Меньше Тогда
		Возврат "<";
    ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно ИЛИ
              СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.МеньшеИлиРавно Тогда
		Возврат "<=";
    ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Содержит 
        ИЛИ СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.Содержит Тогда
		Возврат "Подобно";
	Иначе // другие варианты 
		Возврат "=";
	КонецЕсли;

КонецФункции // ПолучитьВидСравненияДляЗапроса()

Функция ПолучитьПараметрыОтбора(ИмяПоляОтбора, ВидСравненияОтбора, ЗначениеОтбора) Экспорт
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ИмяПоляОтбора"      , Строка(ИмяПоляОтбора));
	СтруктураОтбора.Вставить("ВидСравненияОтбора" , ВидСравненияОтбора);
	СтруктураОтбора.Вставить("ЗначениеОтбора"     , ЗначениеОтбора);
	
	Возврат СтруктураОтбора;

КонецФункции

Процедура ОбработатьДанные(СтруктураПараметров, МассивСсылок, РежимИзмененияДанных, Отказ)
	
	Для каждого Ссылка Из МассивСсылок Цикл
		
		Попытка
			ОбъектДанных = Ссылка.ПолучитьОбъект();
		Исключение

			Отказ = Истина;
			Сообщение = "ГрупповаяОбработкаОбъектовВРабочемПотоке: Произошла ошибка получения объекта данных по ссылке: " + Ссылка + "  
			|Ошибка: " + ОписаниеОшибки();
			Сообщение = НСтр("ru = """+Сообщение+"""");
			МенеджерПотоковЛогирование.ЗаписатьСобытие(СтруктураПараметров, УровеньЖурналаРегистрации.Ошибка, ТекущаяДатаСеанса(), Сообщение);
			Продолжить;

		КонецПопытки;

		Попытка

			Если РежимИзмененияДанных = "ПометкаНаУдаление" Тогда

				ОбъектДанных.УстановитьПометкуУдаления(Истина);

			ИначеЕсли РежимИзмененияДанных = "ОтменаПроведения" Тогда

				ОбъектДанных.Записать(РежимЗаписиДокумента.ОтменаПроведения);

			ИначеЕсли РежимИзмененияДанных = "Проведение" Тогда

				ОбъектДанных.Записать(РежимЗаписиДокумента.Проведение);

			КонецЕсли;

		Исключение

			Отказ = Истина;
			Сообщение = "ГрупповаяОбработкаОбъектовВРабочемПотоке: Не удалось изменить объект: " + Ссылка + "
			|Параметры изменения объекта: " + РежимИзмененияДанных + "
			|Ошибка: " + ОписаниеОшибки();
			Сообщение = НСтр("ru = """+Сообщение+"""");
			МенеджерПотоковЛогирование.ЗаписатьСобытие(СтруктураПараметров, УровеньЖурналаРегистрации.Ошибка, ТекущаяДатаСеанса(), Сообщение);
			Продолжить;

		КонецПопытки;

	КонецЦикла;

КонецПроцедуры
