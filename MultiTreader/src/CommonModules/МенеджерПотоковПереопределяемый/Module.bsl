//    ОБРАБОТЧИКИ УРОВНЯ ЯДРА
//Необходимо реализовать для каждого разеза Менеджера потоков
//  СтруктураПараметров.ИдентификаторМенеджера    - ссылка на Идентификатор
//  СтруктураПараметров.ИдентификаторНаименование - Наименование идентификатора
Функция ОбработатьСобытиеМенеджераПотоков(ИмяСобытия, СтруктураПараметров) Экспорт
	ИдентификаторМенеджера    = СтруктураПараметров.ИдентификаторНаименование;
	
	ОтветСобытия = Неопределено;
	
	Если ИдентификаторМенеджера = "Генератор заявок, перенос неисполненных заявок" Тогда
//		
//		Если ИмяСобытия = "МенеджерПотоковПередЗапуском" Тогда
//			ккГенераторЗаявокПереносНеисполненныхЗаявок.МенеджерПотоковПередЗапуском(СтруктураПараметров);
//		ИначеЕсли ИмяСобытия = "МенеджерПотоковПриЗапуске" Тогда
//			ккГенераторЗаявокПереносНеисполненныхЗаявок.МенеджерПотоковПриЗапуске(СтруктураПараметров)
//		ИначеЕсли ИмяСобытия = "МенеджерПотоковПолучитьДанныеДляЗаписиВСтек" Тогда
//			ккГенераторЗаявокПереносНеисполненныхЗаявок.МенеджерПотоковПолучитьДанныеДляЗаписиВСтек(СтруктураПараметров);
//		ИначеЕсли ИмяСобытия = "РабочийПотокВыполнитьОбработкуДанных" Тогда
//			ккГенераторЗаявокПереносНеисполненныхЗаявок.РабочийПотокВыполнитьОбработкуДанных(СтруктураПараметров);
//		ИначеЕсли ИмяСобытия = "МенеджерПотоковЗавершениеРаботы" Тогда
//			ккГенераторЗаявокПереносНеисполненныхЗаявок.МенеджерПотоковЗавершениеРаботы(СтруктураПараметров);
//		КонецЕсли;

	ИначеЕсли ИдентификаторМенеджера = "Генератор заявок, создание и актуализация заявок" Тогда
		
//		Если ИмяСобытия = "МенеджерПотоковПередЗапуском" Тогда
//			ккГенераторЗаявокСозданиеАктуализацияЗаявок.МенеджерПотоковПередЗапуском(СтруктураПараметров);
//		ИначеЕсли ИмяСобытия = "МенеджерПотоковПриЗапуске" Тогда
//			ккГенераторЗаявокСозданиеАктуализацияЗаявок.МенеджерПотоковПриЗапуске(СтруктураПараметров)
//		ИначеЕсли ИмяСобытия = "МенеджерПотоковПолучитьДанныеДляЗаписиВСтек" Тогда
//			ккГенераторЗаявокСозданиеАктуализацияЗаявок.МенеджерПотоковПолучитьДанныеДляЗаписиВСтек(СтруктураПараметров);
//		ИначеЕсли ИмяСобытия = "РабочийПотокВыполнитьОбработкуДанных" Тогда
//			ккГенераторЗаявокСозданиеАктуализацияЗаявок.РабочийПотокВыполнитьОбработкуДанных(СтруктураПараметров);
//		ИначеЕсли ИмяСобытия = "МенеджерПотоковЗавершениеРаботы" Тогда
//			ккГенераторЗаявокСозданиеАктуализацияЗаявок.МенеджерПотоковЗавершениеРаботы(СтруктураПараметров);
//		КонецЕсли;
//		
	ИначеЕсли ИдентификаторМенеджера = "_АвтоТестирование_" Тогда
		
		Если ИмяСобытия = "МенеджерПотоковПередЗапуском" Тогда
			//В данной процедуре необходимо выполнить все проверки для безусловного запуска менеджера потока
			МенеджерПотоковПередЗапуском(СтруктураПараметров);
		ИначеЕсли ИмяСобытия = "МенеджерПотоковПриЗапуске" Тогда
			//После старта Менеджера потоков, но до начала обработки стека
			//Можно внести коррективы в параметры и данные до начала заполнения стека
			МенеджерПотоковПриЗапуске(СтруктураПараметров);
		ИначеЕсли ИмяСобытия = "МенеджерПотоковПолучитьДанныеДляЗаписиВСтек" Тогда
			//Будем пополнять стек данными для обработки
			МенеджерПотоковПолучитьДанныеДляЗаписиВСтек(СтруктураПараметров);
		ИначеЕсли ИмяСобытия = "РабочийПотокВыполнитьОбработкуДанных" Тогда
			//Основной рабочий алгоритм потока
			РабочийПотокВыполнитьОбработкуДанных(СтруктураПараметров);
		ИначеЕсли ИмяСобытия = "МенеджерПотоковЗавершениеРаботы" Тогда
			//Срабатывает в потоке "Менеджера", после того как остановлены все рабочие потоки
			МенеджерПотоковЗавершениеРаботы(СтруктураПараметров);
		КонецЕсли;
		
	ИначеЕсли ИдентификаторМенеджера = "_ОбработкаОбъектов_" Тогда
		
		Если ИмяСобытия = "МенеджерПотоковПередЗапуском" Тогда
			ГрупповаяОбработкаОбъектов.МенеджерПотоковПередЗапуском(СтруктураПараметров);
		ИначеЕсли ИмяСобытия = "МенеджерПотоковПриЗапуске" Тогда
			ГрупповаяОбработкаОбъектов.МенеджерПотоковПриЗапуске(СтруктураПараметров);
		ИначеЕсли ИмяСобытия = "МенеджерПотоковПолучитьДанныеДляЗаписиВСтек" Тогда
			ГрупповаяОбработкаОбъектов.МенеджерПотоковПолучитьДанныеДляЗаписиВСтек(СтруктураПараметров);
		ИначеЕсли ИмяСобытия = "РабочийПотокВыполнитьОбработкуДанных" Тогда
			ГрупповаяОбработкаОбъектов.РабочийПотокВыполнитьОбработкуДанных(СтруктураПараметров);
		ИначеЕсли ИмяСобытия = "МенеджерПотоковЗавершениеРаботы" Тогда
			ГрупповаяОбработкаОбъектов.МенеджерПотоковЗавершениеРаботы(СтруктураПараметров);
		КонецЕсли;
	Иначе
		СтруктураПараметров.Отказ = Истина;
		Сообщение = "ОбработатьСобытиеМенеджераПотоков: Не реализованы обработчики для Идентификатора
		|Идентификатор задания: %1";
		Сообщение = НСтр("ru = """+СтрШаблон(Сообщение, ИдентификаторМенеджера)+"""");
		МенеджерПотоковЛогирование.ЗаписатьСобытие(СтруктураПараметров,УровеньЖурналаРегистрации.Ошибка, ТекущаяДатаСеанса(), Сообщение);
	КонецЕсли;
	
	Возврат ОтветСобытия;
	
КонецФункции


//    ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ АВТОТЕСТА

//В данной процедуре необходимо выполнить все проверки для безусловного запуска менеджера потока
//    СтруктураПараметров.ПараметрыРазработчика   (Структура)- Параметры для передачи данных между методами
//    СтруктураПараметров.Отказ                   (Булево)   - Флаг сигнализирующий об ошибке Менеджера потока
//    СтруктураПараметров.ПродолжитьВыполнение    (Истина)   - Флаг указывающий на то что, необходимо продолжить обработку данных
//Журнал событий (Ошибка, Предупреждение, Информация), пример:
//    МенеджерПотоковЛогирование.ЗаписатьСобытие(ПараметрыМенеджера,УровеньЖурналаРегистрации.Ошибка,ТекущаяДатаСеанса(),Сообщение);                                                             обрабатываются данные из стека которые завершенные не удачно на предыдущем шаге
Процедура МенеджерПотоковПередЗапуском(СтруктураПараметров)
	//Пример для автотеста:
	//Если НЕ СтруктураПараметров.ПараметрыАвтотеста.ПередЗапускомМенеджераПотоковОтказ Тогда
	//	СтруктураПараметров.Вставить("Отказ"                  , Истина);
	//КонецЕсли;
	
	//Если НЕ СтруктураПараметров.ПараметрыАвтотеста.ПередЗапускомМенеджераПотоковПродолжитьВыполнение Тогда
		//СтруктураПараметров.Вставить("ПродолжитьВыполнение"  , Истина);
	//КонецЕсли;
КонецПроцедуры

//Данная процедура выполняется перед началом заполнения стека
//Для вычисления процента обработанных данных определим полную глубину стека
//После старта Менеджера потоков, но до начала обработки стека
//Параметры:
//    *СтруктураПараметров.КоличествоПорцийВСтеке  (Число)    - полная глубина стека, для определения % выполненной работы
//    СтруктураПараметров.ПараметрыРазработчика   (Структура)- Параметры для передачи данных между методами
//    СтруктураПараметров.Отказ                   (Булево)   - Флаг сигнализирующий об ошибке Менеджера потока
//Журнал событий (Ошибка, Предупреждение, Информация), пример:
//    МенеджерПотоковЛогирование.ЗаписатьСобытие(ПараметрыМенеджера,УровеньЖурналаРегистрации.Ошибка,ТекущаяДатаСеанса(),Сообщение);
Процедура МенеджерПотоковПриЗапуске(СтруктураПараметров)
//Пример для автотеста:
СтруктураПараметров.КоличествоПорцийВСтеке = СтруктураПараметров.ПараметрыАвтотеста.КоличествоПорцийВСтеке;	

КонецПроцедуры

//В данной процедуре происходит пополнение стека, глубина стека равняется количеству рабочих потоков
//После обработки очереди необходимо информировать Менеджер потоков, что обработка стека завершена
//Параметры:
//    *СтруктураПараметров.НомерПорции             (число)    - номер под которым порция данных будет записана в стек
//    *СтруктураПараметров.ПолучениеСтекаЗавершено (булево)   - флаг указывающий, что обработка стека завершена
//    *СтруктураПараметров.ПараметрыПотока         (ХранилищеЗначений) - Данные для расчета в рабочем потоке
//                                                  Неопределено - если не инициализирован
//    *СтруктураПараметров.ДопПараметрыПорции      (ХранилищеЗначений) - Вспомогательные данные для алгоритма получения порции и основного расчета
//                                                  Неопределено - если не инициализирован
//    СтруктураПараметров.ПараметрыРазработчика    (Структура)- Параметры для передачи данных между методами
//    СтруктураПараметров.Отказ                    (Булево)   - Флаг сигнализирующий об ошибке Менеджера потока
//Журнал событий (Ошибка, Предупреждение, Информация), пример:
//    МенеджерПотоковЛогирование.ЗаписатьСобытие(ПараметрыМенеджера,УровеньЖурналаРегистрации.Ошибка,ТекущаяДатаСеанса(),Сообщение);
Процедура МенеджерПотоковПолучитьДанныеДляЗаписиВСтек(СтруктураПараметров)
    //Пример для автотеста:
	Если СтруктураПараметров.НомерПорции > СтруктураПараметров.ПараметрыАвтоТеста.КоличествоПорцийВСтеке Тогда
		СтруктураПараметров.ПолучениеСтекаЗавершено = Истина
	КонецЕсли;
	СтруктураПараметров.ПараметрыПотока    = Новый ХранилищеЗначения(Новый Структура("КлючПараметра","ДанныеПотока") );
    СтруктураПараметров.ДопПараметрыПорции = Новый ХранилищеЗначения(Новый Структура("КлючДопПараметраПорции","ДанныеДопПараметра") );

КонецПроцедуры

//Основной рабочий алгоритм Рабочего потока
//Если произошла ошибка во время обработки данных необходимо заполнить параметр ДопПараметр.ОшибкаОбработкиДанных
//Параметры:
//    *СтруктураПараметров.ПараметрыПотока         (ХранилищеЗначений) - Данные для расчета в рабочем потоке
//    *СтруктураПараметров.ДопПараметрыПорции      (ХранилищеЗначений) - Вспомогательные данные для алгоритма получения порции и основного расчета
//    *СтруктураПараметров.ОшибкаОбработкиДанных           (Булево)   - Флаг указывающий на то, что попытка обработать данные неудачна
//    СтруктураПараметров.ПараметрыРазработчика   (Структура)- !!Не использовать для передачи сообщений между потоками
//Журнал событий (Ошибка, Предупреждение, Информация), пример:
//    МенеджерПотоковЛогирование.ЗаписатьСобытие(СтруктураПараметров,УровеньЖурналаРегистрации.Ошибка,ТекущаяДатаСеанса(),Сообщение);
Процедура РабочийПотокВыполнитьОбработкуДанных(СтруктураПараметров)
	//Пример для автотеста:
	//Если НЕ СтруктураПараметров.ПараметрыАвтотеста.ВыполнитьОбработкуДанныхИзСтека Тогда
	//	СтруктураПараметров.Вставить("ОшибкаОбработкиДанных"  , Истина);
	//КонецЕсли;
	Если СтруктураПараметров.НомерПорции = 3 и Не СтруктураПараметров.ПродолжитьВыполнение  Тогда
	     СтруктураПараметров.ОшибкаОбработкиДанных = истина;
		 МенеджерПотоковЛогирование.ЗаписатьСобытие(СтруктураПараметров,УровеньЖурналаРегистрации.Ошибка,ТекущаяДатаСеанса(),"Тестовое падение в {"+СтруктураПараметров.НомерПорции+"} порции");
	КонецЕсли;
	
	МенеджерПотоковСлужебный.Sleep(10000);
КонецПроцедуры

//Срабатывает в потоке "Менеджера", после того как остановлены все рабочие потоки
//Параметры:
//    СтруктураПараметров.ПараметрыРазработчика    (Структура)- Параметры для передачи данных между методами
//    СтруктураПараметров.Отказ                    (Булево)   - Флаг сигнализирующий об ошибке Менеджера потока
//Журнал событий (Ошибка, Предупреждение, Информация), пример:
//    МенеджерПотоковЛогирование.ЗаписатьСобытие(ПараметрыМенеджера,УровеньЖурналаРегистрации.Ошибка,ТекущаяДатаСеанса(),Сообщение);
Процедура МенеджерПотоковЗавершениеРаботы(СтруктураПараметров)

	

КонецПроцедуры
