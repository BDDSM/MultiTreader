//    РАБОТА С ПАРАМЕТРАМИ

// Данная функция формирует необходимый набор параметров(по умолчанию) для инициализации менеджера потоков.
//	В дальнейшем данный набор можно скорректировать в открытом методе "ПередЗапускомМенеджераПотоков"
//Параметры:
//	ИдентификаторМенеджера - Строка - (100)(Идентификатор менеджера потоков), позволяющая разделить данные и алгоритмы разных менеджеров потоков.
//  ДинамическиеПараметры  - Структура - Инициализируются пользователем перед запуском
Функция ПолучитьСтруктуруПараметровИнициализацииМенеджераПотоков(ИдентификаторМенеджера,ДинамическиеПараметры) Экспорт
	
	СтруктураПараметрыМенеджераПотоков = Новый Структура;
	
	//Идентификатор менеджера потоков. 
	//С помощью данного параметра происходит разделение данных между разными одновременно запущенными менеджерами потоков, 
	СтруктураПараметрыМенеджераПотоков.Вставить("ИдентификаторМенеджера"                           , ИдентификаторМенеджера);
    //По наименованию идентификатора происходит разделение алгоритмов обработки событий ядра менеджера потоков.
    СтруктураПараметрыМенеджераПотоков.Вставить("ИдентификаторНаименование"                         , ПолучитьРеквизитСправочникаДокумента("Справочник.ИдентификаторыМенеджераПотоков","Наименование",ИдентификаторМенеджера));

	//* TODO: 26 сентября 2018 г. - 14:15 (Андреев М.А.)
	//ФУНКЦИОНАЛ НЕ РЕАЛИЗОВАН 
	//Необязательный параметр, по умолчанию = Ложь
	//Определяет необходимость подбора количества потоков в зависимости от:
	//1. нагруженности кластера
	//2. КоличествоЭлементовКолекцииНаПоток
	//3. Глубины стека данных
	СтруктураПараметрыМенеджераПотоков.Вставить("ДинамическийРассчетКоличестваПотоков", Ложь);
	
	//Необязательный параметр, по умолчанию = 5
	//Определяет сколько раз менеджер потоков будет пытаться обработать объект, 
	//если его обработка по каким то причинам не удалась, например, из-за ошибок в данных.
	//В случае ошибок на ожиданиях блокировок, процесс завершается аварийно и данный параметр не обрабатывается
	//	СтруктураПараметров.ПараметрыИнициализации.ПределКоличествоПопытокОбработатьОбъект
	СтруктураПараметрыМенеджераПотоков.Вставить("ПределКоличествоПопытокОбработатьОбъект"    , 5);	
	
	//Здесь будем хранить логи до того как скинем их на диск
	СтруктураПараметрыМенеджераПотоков.Вставить("ЖурналМенеджераПотоков"                 , Новый Массив);
	
	//Признак сигнализирующий о том, что все данные записаны в стек
	СтруктураПараметрыМенеджераПотоков.Вставить("ПолучениеСтекаЗавершено"                 ,Ложь);
	
	//Если было падение менеджера потока, либо некоторые порции из стека обработаны не успешно, тогда можно
	//продолжить обработку после устранения, причины падения, выставив данный флаг
	СтруктураПараметрыМенеджераПотоков.Вставить("ПродолжитьВыполнение"                   , Ложь);
	
	//Исключение на любом этапе работы менеджера потока
	СтруктураПараметрыМенеджераПотоков.Вставить("Отказ"                 ,Ложь);
	
	//Данный параметр д.б. переопределен в процедуре, влияет на процент расчета
	СтруктураПараметрыМенеджераПотоков.Вставить("КоличествоПорцийВСтеке", 0);
	//Данные порции, на соновании которых будет произведен расчет в рабочем потоке
	
	//Заполняется разработчик при получении очередной порции данных
	//Параметр будет сохранен в стеке данных
	СтруктураПараметрыМенеджераПотоков.Вставить("ПараметрыПотока",    Неопределено);
	
	//Дополнительные данные, которые позволят регулировать расчет порции и основной расчет в рабочем потоке
	//Параметр будет сохранен в стеке данных
	СтруктураПараметрыМенеджераПотоков.Вставить("ДопПараметрыПорции", Неопределено);

	//Динамические параметры
    ПараметрыОбработкиДанных = ДинамическиеПараметры.ПараметрыОбработкиДанных;
	Если ПараметрыОбработкиДанных = Неопределено Тогда
		ПараметрыОбработкиДанных = Новый Структура;
	КонецЕсли; 
	СтруктураПараметрыМенеджераПотоков.Вставить("КоличествоЭлементовКолекцииНаПоток"  , ДинамическиеПараметры.КоличествоЭлементовКолекцииНаПоток);
	СтруктураПараметрыМенеджераПотоков.Вставить("РежимОтладки"                        , ДинамическиеПараметры.РежимОтладки);
	СтруктураПараметрыМенеджераПотоков.Вставить("СтруктураОбработчикаЯдра"            , ДинамическиеПараметры.СтруктураОбработчикаЯдра);
	СтруктураПараметрыМенеджераПотоков.Вставить("ДинамическиеПараметры"               , ДинамическиеПараметры);
    Если ПараметрыОбработкиДанных.Свойство("ПродолжитьВыполнение") Тогда
       СтруктураПараметрыМенеджераПотоков.Вставить("ПродолжитьВыполнение"             ,ПараметрыОбработкиДанных.ПродолжитьВыполнение);
    КонецЕсли; 
	
	//Параметры разработчика хранятся в Идентификаторе: Справочник.ИдентифакаторыМенеджераПотоков в реквизите:НастройкиЗадания
	ПараметрыРазработчика = МенеджерПотоковСлужебный.ПолучитьПараметрыРазработчика(ИдентификаторМенеджера);
	
    СтруктураПараметрыМенеджераПотоков.Вставить("ПараметрыРазработчика" , ПараметрыРазработчика);
	
	//Каждый запуск Менеджера потоков определяется уникальностью его ключей: Идентификатором и Пользовательскими настройками
	СтруктураПараметрыМенеджераПотоков.Вставить("КлючНастроек" , Новый УникальныйИдентификатор);
	
	// ПАРАМЕТРЫ АВТОТЕСТА
	ПараметрыАвтоТеста = Новый Структура();
	ПараметрыАвтоТеста.Вставить("КоличествоПорцийВСтеке", 20);
	
	СтруктураПараметрыМенеджераПотоков.Вставить("ПараметрыАвтоТеста" ,   ПараметрыАвтоТеста);
	
	Возврат СтруктураПараметрыМенеджераПотоков;
КонецФункции

// Данная функция формирует запись реестра Менеджера потоков и сохраняет в нем динамические параметры.
//	В дальнейшем данный набор можно скорректировать в любой момент, под любым пользователем, данные будут считаны через 10 сек,
//  Данный параметр также можно будет скорректировать, в основных параметрах Менеджера потока
//
//Параметры:
//	ИдентификаторМенеджера  			- Строка (100) 	- (Идентификатор менеджера потоков), позволяющий разделить данные и алгоритмы разных менеджеров потоков.
//  КоличествоПотоков 					- Число (2) 	- Число потоков которые будут запущены в менеджере.
//  КоличествоЭлементовКолекцииНаПоток 	- Число (2)  	- Число элементов которые будут в одной порции стека.
//  ОбработчикСобытийЯдра				- Строка, ДвоичныеДанные - переопределяемые методы библиотеки, если используется внешняя обработка, тогда двоичные данные.
//	Внешний								- Булево 		- Признак использования внешней обработки
//
//	Возвращаемое значение: 
//	ДинамическиеПараметры - Структура -  Параметры пользователя
//
//
Функция СохранитьДинамическиеПараметрыПользователя(ИдентификаторМенеджера, 
					КоличествоПотоков = 10, 
					КоличествоЭлементовКолекцииНаПоток = 10, 
					РежимОтладки = Ложь,
					ОбработчикСобытийЯдра = "ккМенеджерПотоковПереопред.ОбработатьСобытиеМенеджераПотоков",
					Внешний = Ложь,
					ПараметрыОбработкиДанных = Неопределено,
					ЗапускатьИзУказанногоФайла = Ложь,
					ИмяФайлаОбработки = "") Экспорт
	
	//Данные параметры используются только для обработки коллекции (Функция ОбработатьКоллекциюОбъектов)
	ДинамическиеПараметры = Новый Структура;
	
	КоличествоПотоков = ?(КоличествоПотоков <= 0, 10, КоличествоПотоков);
	//Необязательный параметр, по умолчанию = 10
	//Отвечает за максимальное количество запускаемых потоков в рамках текущего менеджера потоков.
	//	СтруктураПараметров.ПараметрыИнициализации.КоличествоПотоков
	ДинамическиеПараметры.Вставить("КоличествоПотоков"				, КоличествоПотоков);
	
	КоличествоЭлементовКолекцииНаПоток = ?(КоличествоЭлементовКолекцииНаПоток <= 0, 10, КоличествоЭлементовКолекцииНаПоток);
	//	СтруктураПараметров.ПараметрыИнициализации.ПараметрыОбработкиКоллекции.КоличествоЭлементовКолекцииНаПоток
	ДинамическиеПараметры.Вставить("КоличествоЭлементовКолекцииНаПоток"  , КоличествоЭлементовКолекцииНаПоток);
	
	//Определяет месторасположение алгоритмов обработки событий ядра Менеджера потоков. 
	//	СтруктураПараметров.ПараметрыИнициализации.МодульОбработкиСобытийЯдра
	ДинамическиеПараметры.Вставить("СтруктураОбработчикаЯдра",	
					Новый Структура("Внешний, МодульСобытийЯдра, ЗапускатьИзУказанногоФайла, ИмяФайлаОбработки" , Внешний, ОбработчикСобытийЯдра, ЗапускатьИзУказанногоФайла, ИмяФайлаОбработки));
	//СтруктураПараметрыИнициализации.Вставить("СтруктураОбработчикаЯдра"       , 
	//  Новый Структура("Внешний, МодульСобытийЯдра", Истина,пОбработчикСобытийЯдра));
	
	//Данный параметр позволит выполнить алгоритм линейно, без запуска рабочих потоков
	// СтруктураПараметров.РежимОтладки
	ДинамическиеПараметры.Вставить("РежимОтладки"				, РежимОтладки);
	
	//Данный параметр позволит передавать долнительные параметры получение и обработки данных
	// СтруктураПараметров.ПараметрыОбработкиДанных
	Если ПараметрыОбработкиДанных = Неопределено Тогда
		ПараметрыОбработкиДанных = Новый Структура;
	КонецЕсли; 
	ДинамическиеПараметры.Вставить("ПараметрыОбработкиДанных"	, ПараметрыОбработкиДанных);
	
	НаборЗаписей = РегистрыСведений.ДанныеМенеджераПотоков.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдентификаторМенеджера.Установить(ИдентификаторМенеджера);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		ЗаписьРегистра  = НаборЗаписей.Добавить();
		ЗаписьРегистра.ИдентификаторМенеджера = ИдентификаторМенеджера;
	иначе	
		ЗаписьРегистра = НаборЗаписей[0];
	КонецЕсли;
	
	ЗаписьРегистра.ДинамическиеПараметры = Новый ХранилищеЗначения(ДинамическиеПараметры);
	
	Попытка
		НаборЗаписей.Записать();
		Возврат  ДинамическиеПараметры;
	Исключение
		Сообщение = "СохранитьДинамическиеПараметрыПользователя: Не удалось записать регистр ккДанныеМенеджераПотоков
		|Ошибка: "+ОписаниеОшибки();
		Сообщение = НСтр("ru = """+Сообщение+"""");
		
		СообщениеП = Новый СообщениеПользователю;
		СообщениеП.Текст = Сообщение;
		СообщениеП.Сообщить(); 
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция ПолучитьДинамическиеПараметрыПользователя(ИдентификаторМенеджера) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ккДанныеМенеджераПотоков.ДинамическиеПараметры
		|ИЗ
		|	РегистрСведений.ДанныеМенеджераПотоков КАК ккДанныеМенеджераПотоков
		|ГДЕ
		|	ккДанныеМенеджераПотоков.ИдентификаторМенеджера = &ИдентификаторМенеджера";

	Запрос.УстановитьПараметр("ИдентификаторМенеджера", ИдентификаторМенеджера);

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
	    Возврат Неопределено;
	КонецЕсли; 

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.ДинамическиеПараметры.Получить();
	КонецЦикла;

КонецФункции

Функция ИнициализацияПараметровМенеджераПотока(ИдентификаторМенеджера)  Экспорт
	
	//восстановим динамические параметрыпользователя 
	ДинамическиеПараметры = МенеджерПотоковСлужебный.ПолучитьДинамическиеПараметрыПользователя(ИдентификаторМенеджера);
	Если ДинамическиеПараметры = Неопределено Тогда
		ДинамическиеПараметры = МенеджерПотоковСлужебный.СохранитьДинамическиеПараметрыПользователя(ИдентификаторМенеджера);
	КонецЕсли; 
	Возврат МенеджерПотоковСлужебный.ПолучитьСтруктуруПараметровИнициализацииМенеджераПотоков(ИдентификаторМенеджера, ДинамическиеПараметры);
КонецФункции // ИнициализацияПараметровМенеджераПотока()
 
//     СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ 

// Выполнить экспортную процедуру по имени
// Параметры:
//  ИмяМетода  - Строка - имя экспортной процедуры в формате 
//                       <имя объекта>.<имя процедуры>, где <имя объекта> - это
//                       общий модуль или модуль менеджера объекта.
// Параметры  - Массив - параметры передаются в процедуру <ИмяЭкспортнойПроцедуры>
//                       в порядке расположения элементов массива.
// 
// Пример:
//  Параметры = Новый Массив();
//  Параметры.Добавить("1");
//  РаботаВБезопасномРежиме.ВыполнитьМетодКонфигурации("МойОбщийМодуль.МояПроцедура", Параметры);
//
Процедура ВыполнитьМетодКонфигурации(Знач ИмяМетода, Знач Параметры = Неопределено) Экспорт
	
	ПараметрыСтрока = "";
	Если Параметры <> Неопределено И Параметры.Количество() > 0 Тогда
		Для Индекс = 0 По Параметры.ВГраница() Цикл 
			ПараметрыСтрока = ПараметрыСтрока + "Параметры[" + Индекс + "],";
		КонецЦикла;
		ПараметрыСтрока = Сред(ПараметрыСтрока, 1, СтрДлина(ПараметрыСтрока) - 1);
	КонецЕсли;
	
	Выполнить ИмяМетода + "(" + ПараметрыСтрока + ")";
	
КонецПроцедуры

Функция ПолучитьРеквизитСправочникаДокумента(ОбъектМетаданных,НаименованиеРеквизита,Ссылка) Экспорт
	Реквизит = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбъектМетаданных."+НаименованиеРеквизита+" КАК Реквизит
	|ИЗ
	|	"+ОбъектМетаданных+" КАК ОбъектМетаданных
	|ГДЕ
	|	ОбъектМетаданных.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Реквизит = Выборка.Реквизит;
	КонецЦикла;
	
	Возврат Реквизит;
КонецФункции 

//Уберем из параметров - параметры разработчиков, т.к. они не безопасны, могут содержать все что угодно
Функция СериализацияСтруктурыПараметров(СтруктураПараметров)
	
	КопияСтруктураПараметров = Новый Структура;
	
	Для каждого Элемент Из СтруктураПараметров Цикл
		Если Элемент.Ключ = "ПараметрыРазработчика" Тогда
		   Продолжить;
		КонецЕсли; 
		КопияСтруктураПараметров.Вставить(Элемент.Ключ, Элемент.Значение);	
	КонецЦикла; 
	
	Возврат Новый ХранилищеЗначения(КопияСтруктураПараметров);
	
КонецФункции // СериализацияСтруктурыПараметров()

Процедура Sleep(time_msec) Экспорт
	Если ПодключитьВнешнююКомпоненту("ОбщийМакет.AddInNativeSleep", "AddInNativeSleep", ТипВнешнейКомпоненты.Native) Тогда
		Компонента = Новый("AddIn.AddInNativeSleep.NativeSleep");
		Компонента.Sleep(time_msec)	
	КонецЕсли; 	
КонецПроцедуры

//    РАБОТА С МЕНЕДЖЕРОМ ПОТОКОВ

Функция ПолучитьАктивныйМенеджерПотоков() Экспорт
   
    ИдентификаторМенеджера = "";
 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ккДанныеМенеджераПотоков.ИдентификаторМенеджера
		|ИЗ
		|	РегистрСведений.ДанныеМенеджераПотоков КАК ккДанныеМенеджераПотоков
		|ГДЕ
		|	НЕ ккДанныеМенеджераПотоков.Завершен";

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ИдентификаторМенеджера = ВыборкаДетальныеЗаписи.ИдентификаторМенеджера;
	КонецЦикла;

	Возврат ИдентификаторМенеджера;  	
   
КонецФункции // ПолучитьАктивныйМенеджерПотоков()
    
Процедура МенеджерПотоковПолучитьНомерПорции(СтруктураПараметров) Экспорт
    НомерПорции = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ккСтекДанных_Мьютекс.НомерПорции КАК НомерПорции,
	|	ккСтекДанных_Мьютекс.ДопПараметрыПорции
	|ИЗ
	|	РегистрСведений.СтекДанных_Мьютекс КАК ккСтекДанных_Мьютекс
	|ГДЕ
	|	ккСтекДанных_Мьютекс.ИдентификаторМенеджера = &ИдентификаторМенеджера
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерПорции УБЫВ";
	
	Запрос.УстановитьПараметр("ИдентификаторМенеджера", СтруктураПараметров.ИдентификаторМенеджера);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НомерПорции            = ВыборкаДетальныеЗаписи.НомерПорции;
		ДопПараметрыПорции     = ВыборкаДетальныеЗаписи.ДопПараметрыПорции;
	КонецЦикла;
		
	НомерПорции = НомерПорции + 1;

	СтруктураПараметров.Вставить("НомерПорции",НомерПорции); 
	СтруктураПараметров.Вставить("ДопПараметрыПорции",ДопПараметрыПорции);
КонецПроцедуры

Процедура МенеджерПотоковЗаписатьДанныеВСтек(СтруктураПараметров) Экспорт
	Если СтруктураПараметров.Отказ Тогда
		 Возврат;
	КонецЕсли; 
	НаборЗаписей = РегистрыСведений.СтекДанных_Мьютекс.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдентификаторМенеджера.Установить(СтруктураПараметров.ИдентификаторМенеджера);
	НаборЗаписей.Отбор.НомерПорции.Установить(СтруктураПараметров.НомерПорции);

	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ИдентификаторМенеджера  = СтруктураПараметров.ИдентификаторМенеджера;
	НоваяЗапись.НомерПорции             = СтруктураПараметров.НомерПорции;
	НоваяЗапись.Захвачен                = Ложь;
	НоваяЗапись.ПараметрыПотока         = СтруктураПараметров.ПараметрыПотока;
	НоваяЗапись.ДопПараметрыПорции      = СтруктураПараметров.ДопПараметрыПорции;

	Попытка
		НаборЗаписей.Записать();
	Исключение
		СтруктураПараметров.Отказ = Истина;
		Сообщение = "МенеджерПотоковЗаписатьДанныеВСтек: Не удалось записать порцию данных в стек 
		|Ошибка: "+ОписаниеОшибки();
		Сообщение = НСтр("ru = """+Сообщение+"""");
		МенеджерПотоковЛогирование.ЗаписатьСобытие(СтруктураПараметров,УровеньЖурналаРегистрации.Ошибка,ТекущаяДатаСеанса(),Сообщение);
		Возврат;
	КонецПопытки;

КонецПроцедуры

// Данная процедура обновляет запись реестра менеджера потоков
//Параметры:
// СтруктураПараметров -
// ЗавершитьРаботуМП - признак завершения работы менеджера потоков
Процедура ЗаписатьДанныеМенеджераПотоков(СтруктураПараметров, ЗавершитьРаботуМП = Ложь) Экспорт 
	
	НаборЗаписей = РегистрыСведений.ДанныеМенеджераПотоков.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдентификаторМенеджера.Установить(СтруктураПараметров.ИдентификаторМенеджера);
	НаборЗаписей.Прочитать();                                                
	
	Если НаборЗаписей.Количество() = 0  Тогда
		СтруктураПараметров.Отказ = Истина;
		Сообщение = "ЗаписатьДанныеМенеджераПотоков: Не инициализирована запись в реестре менеджера потоков: ккДанныеМенеджераПотоков
		|Ошибка: "+ОписаниеОшибки();
		Сообщение = НСтр("ru = """+Сообщение+"""");
		МенеджерПотоковЛогирование.ЗаписатьСобытие(СтруктураПараметров,УровеньЖурналаРегистрации.Ошибка,ТекущаяДатаСеанса(),Сообщение);
		Возврат;
	иначе
		Запись = НаборЗаписей[0];	
	КонецЕсли;
	
	Если ЗавершитьРаботуМП Тогда
		Запись.Длительность_мс             = ТекущаяУниверсальнаяДатаВМиллисекундах()- Запись.СтартМенеджера_мс; 
		Запись.ЖурналМенеджера             = Новый ХранилищеЗначения(СтруктураПараметров.ЖурналМенеджераПотоков);
		Запись.Завершен                    = Истина;
        Запись.Ошибка                      = СтруктураПараметров.Отказ;
    Иначе
        Если СтруктураПараметров.ПродолжитьВыполнение Тогда
            СтруктураПараметров.КоличествоПорцийВСтеке = Запись.КоличествоПорцийВСтеке;  
        иначе
            Запись.КоличествоПорцийВСтеке      = СтруктураПараметров.КоличествоПорцийВСтеке;
            Запись.Завершен                    = Ложь;
            Запись.Длительность_мс             = 0;
            Запись.СтартМенеджера_мс           = ТекущаяУниверсальнаяДатаВМиллисекундах();
            Запись.ПараметрыМенеджера          = СериализацияСтруктурыПараметров(СтруктураПараметров);
        КонецЕсли; 
	КонецЕсли;
	
	Если ЗавершитьРаботуМП Тогда
	    //Если работа менеджера потока завершено необходимо
		//проверить, что все данные из стека обработаны
		СтатистикаСтека = МенеджерПотоковСлужебный.СтатистикаОбъектовВСтеке(СтруктураПараметров.ИдентификаторМенеджера);
		ЕстьНеОбработанныеИОшибочные = СтатистикаСтека.Всего - СтатистикаСтека.Обработан;
		Запись.Ошибка = ( ЕстьНеОбработанныеИОшибочные <> 0);
	иначе
		Запись.Ошибка = СтруктураПараметров.Отказ;
	КонецЕсли; 
		
	Попытка
		НаборЗаписей.Записать();
	Исключение
		СтруктураПараметров.Отказ = Истина;
		Сообщение = "ЗаписатьДанныеМенеджераПотоков: Не удалось записать регистр ккДанныеМенеджераПотоков
		|Ошибка: "+ОписаниеОшибки();
		Сообщение = НСтр("ru = """+Сообщение+"""");
		МенеджерПотоковЛогирование.ЗаписатьСобытие(СтруктураПараметров,УровеньЖурналаРегистрации.Ошибка,ТекущаяДатаСеанса(),Сообщение);
		//Если финалим менеджер потоков запишем сообщение в журнал регистрации иначе не увидим его
		Если ЗавершитьРаботуМП  Тогда
			МенеджерПотоковЛогирование.СохранитьВЖурналРегистрации(СтруктураПараметров);	
		КонецЕсли; 
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

// Процедура очистит следующие регистры: СтекДанных_Мьютекс
Процедура СтекДанныхПодготовитьКРаботе(СтруктураПараметров) Экспорт
    ИдентификаторМенеджера = СтруктураПараметров.ИдентификаторМенеджера;
    
    Попытка
        //Очищаем стек данных заполнение, расчет будет произведен сначала
        НаборЗаписей = РегистрыСведений.СтекДанных_Мьютекс.СоздатьНаборЗаписей();
        НаборЗаписей.Отбор.ИдентификаторМенеджера.Установить(ИдентификаторМенеджера);
        НаборЗаписей.Записать();
        
        //ВызватьИсключение "_АвтоТест_";
    Исключение
        СтруктураПараметров.Отказ = Истина;
        Сообщение = НСтр("ru = 'СтекДанныхПодготовитьКРаботе: Произошла ошибка во время попытки очистки стека данных рабочих потоков.
        |Ошибка: "+ОписаниеОшибки()+"'") ;
        МенеджерПотоковЛогирование.ЗаписатьСобытие(СтруктураПараметров,УровеньЖурналаРегистрации.Ошибка,ТекущаяДатаСеанса(),Сообщение);
        Возврат;
    КонецПопытки;
КонецПроцедуры
// Процедура очистит следующие регистры: КоллекцияРабочихПотоков, ЖурналОтладкиПотоков
 Процедура КоллекцияРабочихПотоковПодготовитьКРаботе(СтруктураПараметров) Экспорт
    ИдентификаторМенеджера = СтруктураПараметров.ИдентификаторМенеджера;
    
    Попытка
        //Удалим записи о рабочих потоках, предыдущего выполнения	
        НаборЗаписей = РегистрыСведений.КоллекцияРабочихПотоков.СоздатьНаборЗаписей();
        НаборЗаписей.Отбор.ИдентификаторМенеджера.Установить(ИдентификаторМенеджера);
        НаборЗаписей.Записать();
        
        //Очистим журнал отладки потоков	
        НаборЗаписей = РегистрыСведений.ЖурналОтладкиПотоков.СоздатьНаборЗаписей();
        НаборЗаписей.Отбор.ИдентификаторМенеджера.Установить(ИдентификаторМенеджера);
        НаборЗаписей.Записать();

        //ВызватьИсключение "_АвтоТест_";
    Исключение
        СтруктураПараметров.Отказ = Истина;
        Сообщение = НСтр("ru = 'КоллекцияРабочихПотоковПодготовитьКРаботе: Произошла ошибка во время попытки очистки коллекции рабочих потоков.
        |Ошибка: "+ОписаниеОшибки()+"'") ;
        МенеджерПотоковЛогирование.ЗаписатьСобытие(СтруктураПараметров,УровеньЖурналаРегистрации.Ошибка,ТекущаяДатаСеанса(),Сообщение);
        Возврат;
    КонецПопытки;
    
    
КонецПроцедуры
//Функция возвращает номер порции, который еще не обрабатывается в потоке
Функция МенеджерПотоковВернутьНомерПорцииНеЗахвачен(СтруктураПараметров) Экспорт
    НомерПорции = Неопределено; 
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   ккСтекДанных_Мьютекс.НомерПорции КАК НомерПорции
        |ИЗ
        |   РегистрСведений.СтекДанных_Мьютекс КАК ккСтекДанных_Мьютекс
        |ГДЕ
        |   ккСтекДанных_Мьютекс.ИдентификаторМенеджера = &ИдентификаторМенеджера
        |   И НЕ ккСтекДанных_Мьютекс.Захвачен
        |
        |УПОРЯДОЧИТЬ ПО
        |   НомерПорции УБЫВ";

    Запрос.УстановитьПараметр("ИдентификаторМенеджера", СтруктураПараметров.ИдентификаторМенеджера);

    Результат = Запрос.Выполнить();

    ВыборкаДетальныеЗаписи = Результат.Выбрать();

    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        НомерПорции = ВыборкаДетальныеЗаписи.НомерПорции;
    КонецЦикла; 
    
    Возврат НомерПорции;
 КонецФункции // МенеджерПотоковВернутьНомерПорцииНеЗахвачен()
 
//Данная процедура предназначена для захвата порции в стеке данных
// Параметры:
//  СтруктураПараметров  - Структура 
//  НомерПорции          - Число
//  КлючПотока           - Гуид
Процедура МенеджерПотоковОтметкаПорцииПоНомеру(СтруктураПараметров, НомерПорции, КлючПотока) Экспорт	
		
	НаборЗаписей = РегистрыСведений.СтекДанных_Мьютекс.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдентификаторМенеджера.Установить(СтруктураПараметров.ИдентификаторМенеджера);
	НаборЗаписей.Отбор.НомерПорции.Установить(НомерПорции);
	
	НаборЗаписей.Прочитать();
	НаборЗаписей[0].Захвачен    = Истина;
    НаборЗаписей[0].КлючПотока  = КлючПотока;
		
	Попытка
		НаборЗаписей.Записать();
	Исключение
		СтруктураПараметров.Отказ = Истина;
		Сообщение = "МенеджерПотоковОтметкаПорцииПоНомеру: Не удалось записать регистр 'ккСтекДанных_Мьютекс'
		|Номер порции: "+НомерПорции+"
		|Ошибка: "+ОписаниеОшибки();
		Сообщение = НСтр("ru = """+Сообщение+"""");
		МенеджерПотоковЛогирование.ЗаписатьСобытие(СтруктураПараметров,УровеньЖурналаРегистрации.Ошибка, ТекущаяДатаСеанса(), Сообщение);
		Возврат;
	КонецПопытки;
		
КонецПроцедуры

//Данная процедура предназначена для захвата порции в стеке данных
// Параметры:
//  СтруктураПараметров  - Структура 
//  НомерПорции           - Число
//  КлючПотока           - Число
Процедура МенеджерПотоковПередачаНомераВРабочийПоток(СтруктураПараметров, НомерПорции, КлючПотока) Экспорт	
		
	НаборЗаписей = РегистрыСведений.КоллекцияРабочихПотоков.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдентификаторМенеджера.Установить(СтруктураПараметров.ИдентификаторМенеджера);
	НаборЗаписей.Отбор.КлючПотока.Установить(КлючПотока);
	
	НаборЗаписей.Прочитать();
	НаборЗаписей[0].НомерПорции   = НомерПорции;
	НаборЗаписей[0].Состояние      = Перечисления.СостояниеРабочегоПотока.Активен;
		
	Попытка
		НаборЗаписей.Записать();
	Исключение
		СтруктураПараметров.Отказ = Истина;
		Сообщение = "МенеджерПотоковПередачаНомераВРабочийПоток: Не удалось записать регистр 'ккКоллекцияРабочихПотоков'
		|Номер порции: "+НомерПорции+"
		|Ошибка: "+ОписаниеОшибки();
		Сообщение = НСтр("ru = """+Сообщение+"""");
		МенеджерПотоковЛогирование.ЗаписатьСобытие(СтруктураПараметров,УровеньЖурналаРегистрации.Ошибка, ТекущаяДатаСеанса(), Сообщение);
		Возврат;
	КонецПопытки;
		
КонецПроцедуры

//Данная процедура добавляет информацию в реестр о старте менеджера
Процедура ДобавитьЗаписьРеестрЗаданийМенеджер(ИдентификаторМенеджера,СтруктураПараметров) Экспорт
	
	НаборЗаписей = РегистрыСведений.РеестрЗаданийМенеджераФЗ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдентификаторМенеджера.Установить(ИдентификаторМенеджера);
	НаборЗаписей.Отбор.КлючНастроек.Установить(СтруктураПараметров.КлючНастроек);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Период                 = ТекущаяДатаСеанса();
	Запись.ИдентификаторМенеджера = ИдентификаторМенеджера;
	Запись.КлючНастроек = СтруктураПараметров.КлючНастроек;
	
	Запись.Состояние        = Перечисления.СостояниеРабочегоПотока.Активен;
	Запись.НастройкиЗадания = Новый ХранилищеЗначения(СтруктураПараметров.ПараметрыРазработчика);
	//Запись.Ответственный    = Пользователи.ТекущийПользователь();
	
	НаборЗаписей.Записать();
КонецПроцедуры

Процедура ОбновитьЗаписьРеестраЗаданийМенеджера(СтруктураПараметров, Завершен) Экспорт
	
	НаборЗаписей = РегистрыСведений.РеестрЗаданийМенеджераФЗ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдентификаторМенеджера.Установить(СтруктураПараметров.ИдентификаторМенеджера);
	НаборЗаписей.Отбор.КлючНастроек.Установить(СтруктураПараметров.КлючНастроек);
	
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() > 0 Тогда
		Запись = НаборЗаписей[0];
		Если Завершен Тогда
			//Если ошибка в менеджере финалить не будем  или есть не обработанные
			КоличествоНеОбработанных = СтруктураПараметров.СтатистикаСтека.Всего - СтруктураПараметров.СтатистикаСтека.Обработан;
			Если СтруктураПараметров.Отказ ИЛИ КоличествоНеОбработанных <> 0 Тогда
				Запись.Состояние = Перечисления.СостояниеРабочегоПотока.ЗавершенАварийно;
			иначе
				Запись.Состояние = Перечисления.СостояниеРабочегоПотока.Завершен;
			КонецЕсли;
			Запись.КоличествоПорций = СтруктураПараметров.СтатистикаСтека.Всего;
			Запись.ВремяЗавершения = ТекущаяДатаСеанса();	
		КонецЕсли; 
		
		Если СтруктураПараметров.Отказ Тогда
			Запись.ЖурналМенеджера = Новый ХранилищеЗначения(СтруктураПараметров.ЖурналМенеджераПотоков);
		КонецЕсли; 
	КонецЕсли; 
	
	НаборЗаписей.Записать();
КонецПроцедуры
 
//Функция возвращает параметры разработчики определенные в Идентификаторе задания, возможно через пользовательскую форму.
Функция ПолучитьПараметрыРазработчика(ИдентификаторМенеджера) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ккИдентификаторыМенеджераПотоков.НастройкиЗадания КАК НастройкиЗадания
	|ИЗ
	|	Справочник.ИдентификаторыМенеджераПотоков КАК ккИдентификаторыМенеджераПотоков
	|ГДЕ
	|	ккИдентификаторыМенеджераПотоков.Ссылка = &ИдентификаторМенеджера";
	
	Запрос.УстановитьПараметр("ИдентификаторМенеджера", ИдентификаторМенеджера);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НастройкиЗадания =  ВыборкаДетальныеЗаписи.НастройкиЗадания.Получить();
		Если НастройкиЗадания = Неопределено Тогда
			НастройкиЗадания = Новый Структура(); 
		КонецЕсли;
		Возврат НастройкиЗадания;
	КонецЦикла;
	
КонецФункции

//+ Просветова 07-11-2019 DEV1C-4509
Функция ПолучитьСтруктуруСостоянияМенеджераПотоков(ИдентификаторМенеджера) Экспорт
	
	СтруктураСостояния = Новый Структура();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторМенеджера", ИдентификаторМенеджера);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ккДанныеМенеджераПотоков.Завершен КАК Завершен,
		|	ккДанныеМенеджераПотоков.Ошибка КАК Ошибка
		|ИЗ
		|	РегистрСведений.ДанныеМенеджераПотоков КАК ккДанныеМенеджераПотоков
		|ГДЕ
		|	ккДанныеМенеджераПотоков.ИдентификаторМенеджера = &ИдентификаторМенеджера";

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		СтруктураСостояния.Вставить("Завершен"	, ВыборкаДетальныеЗаписи.Завершен);
		СтруктураСостояния.Вставить("Ошибка"	, ВыборкаДетальныеЗаписи.Ошибка);
	КонецЕсли;

	Возврат СтруктураСостояния;  	
   
КонецФункции //ПолучитьСтруктуруСостоянияМенеджераПотоков()
//+ Просветова 07-11-2019 DEV1C-4509
 
 //    РАБОТА С РАБОЧИМИ ПОТОКАМИ

// Запишем информацию о том что обработка порции завершена, Флаг "захвачен" не снимаем, запишем длительность обработки потока
Процедура РабочийПотокОбновитьДанныеСтека(СтруктураПараметров) Экспорт 
	НаборЗаписей = РегистрыСведений.СтекДанных_Мьютекс.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдентификаторМенеджера.Установить(СтруктураПараметров.ИдентификаторМенеджера);
	НаборЗаписей.Отбор.НомерПорции.Установить(СтруктураПараметров.НомерПорции);
	НаборЗаписей.Отбор.Захвачен.Установить(Истина);
	
	НаборЗаписей.Прочитать();
	Попытка
		Если СтруктураПараметров.ОшибкаОбработкиДанных Тогда
			НаборЗаписей[0].Ошибка       = Истина;
			НаборЗаписей[0].ЖурналДанных = Новый ХранилищеЗначения(СтруктураПараметров.ЖурналМенеджераПотоков);
		иначе	
			НаборЗаписей[0].Ошибка       = Ложь;
			НаборЗаписей[0].Обработан    = Истина;
		КонецЕсли;
		НаборЗаписей[0].Длительность_мс =ТекущаяУниверсальнаяДатаВМиллисекундах()-НаборЗаписей[0].СтартПотока;                      
		НаборЗаписей.Записать();
		
		//Отладка многопоточности
        //НаборЗаписей = РегистрыСведений.ЖурналОтладкиПотоков.СоздатьНаборЗаписей();
        //НаборЗаписей.Отбор.ИдентификаторМенеджера.Установить(СтруктураПараметров.ИдентификаторМенеджера);
        //НаборЗаписей.Отбор.КлючПотока.Установить(СтруктураПараметров.КлючПотока);
        //НаборЗаписей.Отбор.НомерПорции.Установить(СтруктураПараметров.НомерПорции);
        //
        //НаборЗаписей.Прочитать();
        //НаборЗаписей[0].ПериодКонец = ТекущаяДатаСеанса();
        //НаборЗаписей.Записать();
	Исключение
		СтруктураПараметров.Отказ = Истина;
		Сообщение = "РабочийПотокОбновитьДанныеСтека: Не удалось записать регистр 'ккСтекДанных_Мьютекс'
		|Номер порции: "+СтруктураПараметров.НомерПорции+"
		|Ошибка: "+ОписаниеОшибки();
		Сообщение = НСтр("ru = """+Сообщение+"""");
		МенеджерПотоковЛогирование.ЗаписатьСобытие(СтруктураПараметров,УровеньЖурналаРегистрации.Ошибка, ТекущаяДатаСеанса(), Сообщение);
		Возврат;
	КонецПопытки;
КонецПроцедуры

// Данная процедура обновляет запись в коллекции рабочих потоков
//Параметры:
// СтруктураПараметров -
// ДанныеПотока        - Данные рабочего потока
Процедура ЗаписатьДанныеРабочегоПотока(СтруктураПараметров, КлючПотока,  ДанныеПотока = Неопределено) Экспорт
    ИдентификаторМенеджера  = СтруктураПараметров.ИдентификаторМенеджера;
    НаборЗаписей = РегистрыСведений.КоллекцияРабочихПотоков.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдентификаторМенеджера.Установить(ИдентификаторМенеджера);
	НаборЗаписей.Отбор.КлючПотока.Установить(КлючПотока);
	НаборЗаписей.Прочитать();                                                
	
	Если НаборЗаписей.Количество() = 0  Тогда
		Запись  = НаборЗаписей.Добавить();
		Запись.ИдентификаторМенеджера = ИдентификаторМенеджера;
		Запись.КлючПотока            = КлючПотока;
		ЖурналПотока = Новый Массив;
	иначе
		Запись = НаборЗаписей[0];
		ЖурналПотока = Запись.ЖурналПотока.Получить();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Запись, ДанныеПотока);
    
    Если НЕ СтруктураПараметров = Неопределено Тогда
        //Заполнить журнал рабочего потока
        Для каждого Сообщение Из СтруктураПараметров.ЖурналМенеджераПотоков Цикл
            ЖурналПотока.Добавить(Сообщение);
        КонецЦикла;  	
        Запись.ЖурналПотока = Новый ХранилищеЗначения(ЖурналПотока);	
    КонецЕсли; 
	
	
    Попытка
        НаборЗаписей.Записать();
    Исключение
        СтруктураПараметров.Отказ = Истина; 
        Сообщение = "ЗаписатьДанныеРабочегоПотока: Не удалось записать регистр ккКоллекцияРабочихПотоков
        |Параметры: КлючПотока("+КлючПотока+") Состояние: ("+ДанныеПотока.Состояние+")
        |Ошибка: "+ОписаниеОшибки();
        Сообщение = НСтр("ru = """+Сообщение+"""");
        МенеджерПотоковЛогирование.ЗаписатьСобытие(СтруктураПараметров,УровеньЖурналаРегистрации.Ошибка,ТекущаяДатаСеанса(),Сообщение); 
        Возврат;
    КонецПопытки;
КонецПроцедуры

Функция РезультатАктивныеРабочиеПотоки(ИдентификаторМенеджера) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ккКоллекцияРабочихПотоков.КлючПотока,
	|	ккКоллекцияРабочихПотоков.НомерПорции,
	|	ккКоллекцияРабочихПотоков.КоличествоПерезапусков
	|ИЗ
	|	РегистрСведений.КоллекцияРабочихПотоков КАК ккКоллекцияРабочихПотоков
	|ГДЕ
	|	ккКоллекцияРабочихПотоков.ИдентификаторМенеджера = &ИдентификаторМенеджера
	|	И ккКоллекцияРабочихПотоков.Состояние В(&Состояние)";
	
	Запрос.УстановитьПараметр("ИдентификаторМенеджера", ИдентификаторМенеджера);
	МассивСостояний = Новый Массив;
	МассивСостояний.Добавить(Перечисления.СостояниеРабочегоПотока.Активен);
	МассивСостояний.Добавить(Перечисления.СостояниеРабочегоПотока.ВОжидании);
	Запрос.УстановитьПараметр("Состояние", МассивСостояний);
	Возврат Запрос.Выполнить();
КонецФункции // РезультатАктивныеРабочиеПотоки(СтруктураПараметров.ИдентификаторМенеджера)

Функция ВыбратьОжидающиеПотокиБезНагрузки(СтруктураПараметров) Экспорт

    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   ккКоллекцияРабочихПотоков.ИдентификаторМенеджера,
    |   ккКоллекцияРабочихПотоков.КлючПотока,
    |   ккКоллекцияРабочихПотоков.Состояние
    |ИЗ
    |   РегистрСведений.КоллекцияРабочихПотоков КАК ккКоллекцияРабочихПотоков
    |ГДЕ
    |   ккКоллекцияРабочихПотоков.ИдентификаторМенеджера = &ИдентификаторМенеджера
    |   И ккКоллекцияРабочихПотоков.Состояние = &Состояние
    |   И ккКоллекцияРабочихПотоков.НомерПорции = 0";
    
    Запрос.УстановитьПараметр("ИдентификаторМенеджера", СтруктураПараметров.ИдентификаторМенеджера);
    Запрос.УстановитьПараметр("Состояние", Перечисления.СостояниеРабочегоПотока.ВОжидании);
    
    Результат = Запрос.Выполнить();
    
    Возврат Результат.Выбрать();
	
КонецФункции // ВыбратьОжидающиеПотокиБезНагрузки()
 
//    ПРОЦЕДУРЫ И ФУНКЦИИ ПО РАБОТЕ СО СТЕКОМ
 
//// Необходимо получить номер порции и данные из стека 
////пометим порцию в стеке, флагом, что порция захвачена потоком и находится в обработке
////Проставим время начала обработки стека
//Процедура РабочийПотокПолучитьДанныеИзСтека(ИдентификаторМенеджера, СтруктураПараметров) Экспорт
//	//Перед началом блокировки проверим что есть готовые данные для обработки
//	//Если данных нет то ставим на слип
//	
//	Запрос = Новый Запрос;
//	Запрос.УстановитьПараметр("ИдентификаторМенеджера", ИдентификаторМенеджера);
//	ТекстЗапроса = 
//	"ВЫБРАТЬ ПЕРВЫЕ 1
//	|	СтекДанных_Мьютекс.НомерПорции,
//	|	СтекДанных_Мьютекс.ПараметрыПотока,
//	|	СтекДанных_Мьютекс.ДопПараметрыПорции
//	|ИЗ
//	|	РегистрСведений.СтекДанных_Мьютекс КАК СтекДанных_Мьютекс
//	|ГДЕ
//	|	СтекДанных_Мьютекс.ИдентификаторМенеджера = &ИдентификаторМенеджера
//	|	И НЕ(СтекДанных_Мьютекс.Ошибка
//	|				ИЛИ СтекДанных_Мьютекс.Обработан)
//	|	И НЕ СтекДанных_Мьютекс.Захвачен
//	|
//	|УПОРЯДОЧИТЬ ПО
//	|	СтекДанных_Мьютекс.НомерПорции";
//	
//	Запрос.Текст = ТекстЗапроса;
//	Результат = Запрос.Выполнить();
//	
//	Если Результат.Пустой() Тогда
//		СтруктураПараметров.ОбработкаСтекаЗавершена = Истина;
//		Возврат;
//	КонецЕсли;
//	
//	
//	НачатьТранзакцию();
//		БлокировкаДанных = Новый БлокировкаДанных;
//		ЭлементБлокировки = БлокировкаДанных.Добавить();
//		ЭлементБлокировки.Область = "РегистрСведений.СтекДанных_Мьютекс";
//		ЭлементБлокировки.УстановитьЗначение("ИдентификаторМенеджера",ИдентификаторМенеджера);
//		ЭлементБлокировки.УстановитьЗначение("Захвачен", Ложь);

//		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
//		Попытка
//			БлокировкаДанных.Заблокировать();
//			//ВызватьИсключение "Не удалось установить блокировку на стек данных";
//		Исключение
//			СтруктураПараметров.Отказ = Истина;
//			Сообщение = "РабочийПотокПолучитьДанныеИзСтека: Не удалось получить блокировку на регистр 'СтекДанных_Мьютекс'
//			|Ошибка: "+ОписаниеОшибки();
//			Сообщение = НСтр("ru = """+Сообщение+"""");
//			МенеджерПотоковЛогирование.ЗаписатьСобытие(СтруктураПараметров,УровеньЖурналаРегистрации.Ошибка, ТекущаяДатаСеанса(), Сообщение);
//			ОтменитьТранзакцию();
//			Возврат;
//		КонецПопытки;
//		
//		Запрос = Новый Запрос;
//		Запрос.УстановитьПараметр("ИдентификаторМенеджера", ИдентификаторМенеджера);
//		Запрос.Текст = ТекстЗапроса;
//		Результат = Запрос.Выполнить();
//		
//		Если Результат.Пустой() Тогда
//			СтруктураПараметров.ОбработкаСтекаЗавершена = Истина;
//			ОтменитьТранзакцию();
//			Возврат;
//		иначе
//			СтруктураПараметров.ОбработкаСтекаЗавершена = Ложь;
//		КонецЕсли;
//		
//		ВыборкаДетальныеЗаписи = Результат.Выбрать();
//		
//		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
//			// Вставить обработку выборки ВыборкаДетальныеЗаписи
//			НомерПорции        = ВыборкаДетальныеЗаписи.НомерПорции;
//			ПараметрыПотока    = ВыборкаДетальныеЗаписи.ПараметрыПотока;
//			ДопПараметрыПорции = ВыборкаДетальныеЗаписи.ДопПараметрыПорции;
//		КонецЦикла;
//		
//		НаборЗаписей = РегистрыСведений.СтекДанных_Мьютекс.СоздатьНаборЗаписей();
//		НаборЗаписей.Отбор.ИдентификаторМенеджера.Установить(ИдентификаторМенеджера);
//		НаборЗаписей.Отбор.НомерПорции.Установить(НомерПорции);
//		
//		НаборЗаписей.Прочитать();
//		НаборЗаписей[0].Захвачен      = Истина;
//		НаборЗаписей[0].СтартПотока   = ТекущаяУниверсальнаяДатаВМиллисекундах();
//		НаборЗаписей[0].КлючПотока    = СтруктураПараметров.КлючПотока;
//		
//	Попытка
//		НаборЗаписей.Записать();
//		ЗафиксироватьТранзакцию();
//		
//		СтруктураПараметров.Вставить("НомерПорции",НомерПорции);
//		СтруктураПараметров.Вставить("ПараметрыПотока",ПараметрыПотока);
//		СтруктураПараметров.Вставить("ДопПараметрыПорции",ДопПараметрыПорции);

//		МенеджерЗаписи = РегистрыСведений.ЖурналОтладкиПотоков.СоздатьМенеджерЗаписи();
//		МенеджерЗаписи.ИдентификаторМенеджера = ИдентификаторМенеджера;
//		МенеджерЗаписи.КлючПотока   = СтруктураПараметров.КлючПотока;
//		МенеджерЗаписи.НомерПорции  = НомерПорции;
//		МенеджерЗаписи.ПериодЗаписи = ТекущаяДатаСеанса();
//		МенеджерЗаписи.Записать();
//		
//		//ВызватьИсключение "Ошибка записи"
//	Исключение
//		//Возможно нужно вызвать исключение (или установить счетчик попыток) и уронить поток, иначе будет попадать в эту точку бесконечно
//		СтруктураПараметров.Отказ = Истина;
//		Сообщение = "РабочийПотокПолучитьДанныеИзСтека: Не удалось записать регистр 'СтекДанных_Мьютекс'
//		|Номер порции: "+НомерПорции+"
//		|Ошибка: "+ОписаниеОшибки();
//		Сообщение = НСтр("ru = """+Сообщение+"""");
//		МенеджерПотоковЛогирование.ЗаписатьСобытие(СтруктураПараметров,УровеньЖурналаРегистрации.Ошибка, ТекущаяДатаСеанса(), Сообщение);
//		ОтменитьТранзакцию();
//		Возврат;
//	КонецПопытки;
//		
//КонецПроцедуры

//Данная процедура предназначена для получения данных после падения потока
Процедура РабочийПотокПолучитьДанныеИзСтекаПоКлючуПотока(ИдентификаторМенеджера, СтруктураПараметров,  КлючПотока) Экспорт	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторМенеджера", ИдентификаторМенеджера);
	Запрос.УстановитьПараметр("КлючПотока", КлючПотока);
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ккСтекДанных_Мьютекс.НомерПорции,
	|	ккСтекДанных_Мьютекс.ПараметрыПотока,
	|	ккСтекДанных_Мьютекс.ДопПараметрыПорции
	|ИЗ
	|	РегистрСведений.СтекДанных_Мьютекс КАК ккСтекДанных_Мьютекс
	|ГДЕ
	|	ккСтекДанных_Мьютекс.ИдентификаторМенеджера = &ИдентификаторМенеджера
	|	И ккСтекДанных_Мьютекс.КлючПотока = &КлючПотока
	|	И НЕ(ккСтекДанных_Мьютекс.Обработан
	|				ИЛИ ккСтекДанных_Мьютекс.Ошибка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ккСтекДанных_Мьютекс.НомерПорции";
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		//СтруктураПараметров.ОбработкаСтекаЗавершена = Истина;
        СтруктураПараметров.Вставить("Состояние",Перечисления.СостояниеРабочегоПотока.ВОжидании);
		Возврат;
	иначе
		СтруктураПараметров.Вставить("Состояние",Перечисления.СостояниеРабочегоПотока.Активен);
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		НомерПорции        = ВыборкаДетальныеЗаписи.НомерПорции;
		ПараметрыПотока    = ВыборкаДетальныеЗаписи.ПараметрыПотока;
		ДопПараметрыПорции = ВыборкаДетальныеЗаписи.ДопПараметрыПорции;
	КонецЦикла;
		
	НаборЗаписей = РегистрыСведений.СтекДанных_Мьютекс.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдентификаторМенеджера.Установить(ИдентификаторМенеджера);
	НаборЗаписей.Отбор.НомерПорции.Установить(НомерПорции);
	
	НаборЗаписей.Прочитать();
	НаборЗаписей[0].СтартПотока = ТекущаяУниверсальнаяДатаВМиллисекундах();
		
	Попытка
		НаборЗаписей.Записать();
		СтруктураПараметров.Вставить("НомерПорции",НомерПорции);
		СтруктураПараметров.Вставить("ПараметрыПотока",ПараметрыПотока);
		СтруктураПараметров.Вставить("ДопПараметрыПорции",ДопПараметрыПорции);
        СтруктураПараметров.Вставить("Состояние",Перечисления.СостояниеРабочегоПотока.Активен);
	Исключение
		//Возможно нужно вызвать исключение (или установить счетчик попыток) и уронить поток, иначе будет попадать в эту точку бесконечно
		СтруктураПараметров.Отказ = Истина;
		Сообщение = "РабочийПотокПолучитьДанныеИзСтекаПоКлючуПотока: Не удалось записать регистр 'ккСтекДанных_Мьютекс'
		|Номер порции: "+НомерПорции+"
		|Ошибка: "+ОписаниеОшибки();
		Сообщение = НСтр("ru = """+Сообщение+"""");
		МенеджерПотоковЛогирование.ЗаписатьСобытие(СтруктураПараметров,УровеньЖурналаРегистрации.Ошибка, ТекущаяДатаСеанса(), Сообщение);
		Возврат;
	КонецПопытки;
		
КонецПроцедуры

// Вернем количество порций в стеке, со статусом (Не Ошибка или Не Обработан)
//Параметры:
//    ИдентификаторМенеджера - (строка)
//Возврат:
//        СтатистикаСтека - (Структура)  - Новый Структура("Всего, Ошибка, Обработан") 
Функция СтатистикаОбъектовВСтеке(ИдентификаторМенеджера) Экспорт
	СтатистикаСтека = Новый Структура("Всего, Ошибка, Обработан",0,0,0); 

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторМенеджера", ИдентификаторМенеджера);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ккСтекДанных_Мьютекс.ИдентификаторМенеджера,
	|	СУММА(ВЫБОР
	|			КОГДА ккСтекДанных_Мьютекс.Ошибка
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Ошибка,
	|	СУММА(ВЫБОР
	|			КОГДА ккСтекДанных_Мьютекс.Обработан
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Обработан,
	|	КОЛИЧЕСТВО(ккСтекДанных_Мьютекс.НомерПорции) КАК Всего
	|ИЗ
	|	РегистрСведений.СтекДанных_Мьютекс КАК ккСтекДанных_Мьютекс
	|ГДЕ
	|	ккСтекДанных_Мьютекс.ИдентификаторМенеджера = &ИдентификаторМенеджера
	|
	|СГРУППИРОВАТЬ ПО
	|	ккСтекДанных_Мьютекс.ИдентификаторМенеджера";
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СтатистикаСтека,ВыборкаДетальныеЗаписи);
	КонецЦикла;
	
	Возврат СтатистикаСтека;
КонецФункции // КоличествоОбъектовВСтекеДляОбработки()

//Данная процедура предназначена для отладки и ошибок в порциях с помощью дебагера
Процедура РабочийПотокПолучитьДанныеИзСтекаПоНомеруПорции(ИдентификаторМенеджера, СтруктураПараметров, НомерПорции) Экспорт	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторМенеджера", ИдентификаторМенеджера);
	Запрос.УстановитьПараметр("НомерПорции", НомерПорции);
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ккСтекДанных_Мьютекс.НомерПорции,
	|	ккСтекДанных_Мьютекс.ПараметрыПотока,
	|	ккСтекДанных_Мьютекс.ДопПараметрыПорции
	|ИЗ
	|	РегистрСведений.СтекДанных_Мьютекс КАК ккСтекДанных_Мьютекс
	|ГДЕ
	|	ккСтекДанных_Мьютекс.ИдентификаторМенеджера = &ИдентификаторМенеджера
	|	И ккСтекДанных_Мьютекс.НомерПорции = &НомерПорции
	|
	|УПОРЯДОЧИТЬ ПО
	|	ккСтекДанных_Мьютекс.НомерПорции";
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		СтруктураПараметров.ОбработкаСтекаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НомерПорции        = ВыборкаДетальныеЗаписи.НомерПорции;
		ПараметрыПотока    = ВыборкаДетальныеЗаписи.ПараметрыПотока;
		ДопПараметрыПорции = ВыборкаДетальныеЗаписи.ДопПараметрыПорции;
	КонецЦикла;
		
	НаборЗаписей = РегистрыСведений.СтекДанных_Мьютекс.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдентификаторМенеджера.Установить(ИдентификаторМенеджера);
	НаборЗаписей.Отбор.НомерПорции.Установить(НомерПорции);
	
	НаборЗаписей.Прочитать();
	НаборЗаписей[0].Захвачен    = Истина;
	НаборЗаписей[0].СтартПотока = ТекущаяУниверсальнаяДатаВМиллисекундах();
		
	Попытка
		НаборЗаписей.Записать();
	
		СтруктураПараметров.Вставить("НомерПорции",НомерПорции);
		СтруктураПараметров.Вставить("ПараметрыПотока",ПараметрыПотока);
		СтруктураПараметров.Вставить("ДопПараметрыПорции",ДопПараметрыПорции);
	Исключение
		//Возможно нужно вызвать исключение (или установить счетчик попыток) и уронить поток, иначе будет попадать в эту точку бесконечно
		СтруктураПараметров.Отказ = Истина;
		Сообщение = "РабочийПотокПолучитьДанныеИзСтека: Не удалось записать регистр 'ккСтекДанных_Мьютекс'
		|Номер порции: "+НомерПорции+"
		|Ошибка: "+ОписаниеОшибки();
		Сообщение = НСтр("ru = """+Сообщение+"""");
		МенеджерПотоковЛогирование.ЗаписатьСобытие(СтруктураПараметров,УровеньЖурналаРегистрации.Ошибка, ТекущаяДатаСеанса(), Сообщение);
		Возврат;
	КонецПопытки;
		
КонецПроцедуры
 
// Подготовим стек данных к последующей обработке, после сбоя
Процедура СтекДанныхОшибкиПодготовитьКРаботе(СтруктураПараметров) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
        |   ккСтекДанных_Мьютекс.ИдентификаторМенеджера,
        |   ккСтекДанных_Мьютекс.Захвачен,
        |   ккСтекДанных_Мьютекс.НомерПорции,
        |   ккСтекДанных_Мьютекс.ПараметрыПотока,
        |   ккСтекДанных_Мьютекс.Ошибка,
        |   ккСтекДанных_Мьютекс.Обработан,
        |   ккСтекДанных_Мьютекс.Зависимый,
        |   ккСтекДанных_Мьютекс.ЖурналДанных,
        |   ккСтекДанных_Мьютекс.СтартПотока,
        |   ккСтекДанных_Мьютекс.Длительность_мс,
        |   ккСтекДанных_Мьютекс.ДопПараметрыПорции
        |ИЗ
        |   РегистрСведений.СтекДанных_Мьютекс КАК ккСтекДанных_Мьютекс
        |ГДЕ
        |   ккСтекДанных_Мьютекс.ИдентификаторМенеджера = &ИдентификаторМенеджера
        |   И НЕ ккСтекДанных_Мьютекс.Обработан";

	Запрос.УстановитьПараметр("ИдентификаторМенеджера", СтруктураПараметров.ИдентификаторМенеджера);

	Результат = Запрос.Выполнить();

	Выборка = Результат.Выбрать();

	НаборЗаписей = РегистрыСведений.СтекДанных_Мьютекс.СоздатьНаборЗаписей();
	
	Пока Выборка.Следующий() Цикл
		НаборЗаписей.Отбор.ИдентификаторМенеджера.Установить(Выборка.ИдентификаторМенеджера);
		НаборЗаписей.Отбор.НомерПорции.Установить(Выборка.НомерПорции);
		НаборЗаписей.Прочитать();
		
		НаборЗаписей[0].Захвачен = Ложь;
		НаборЗаписей[0].Ошибка = Ложь; ;
        НаборЗаписей[0].Обработан = Ложь ;
        НаборЗаписей[0].ЖурналДанных = Неопределено ;
		НаборЗаписей[0].СтартПотока = 0;
		НаборЗаписей[0].Длительность_мс = 0;
        НаборЗаписей[0].КлючПотока = Неопределено;
		Попытка
			НаборЗаписей.Записать();
			//ВызватьИсключение "_АвтоТест_";
		Исключение
			СтруктураПараметров.Отказ = Истина;
			Сообщение = НСтр("ru = 'СтекДанныхОшибкиПодготовитьКРаботе: Произошла ошибка во время попытки подготовки данных стека, к обработке после сбоя.
			|Ошибка: "+ОписаниеОшибки()+"'") ;
			МенеджерПотоковЛогирование.ЗаписатьСобытие(СтруктураПараметров,УровеньЖурналаРегистрации.Ошибка,ТекущаяДатаСеанса(),Сообщение);
			Возврат;
		КонецПопытки;	
	КонецЦикла;

КонецПроцедуры

